-- MariaDB dump 10.17  Distrib 10.5.4-MariaDB, for Win64 (AMD64)
--
-- Host: localhost    Database: tblog
-- ------------------------------------------------------
-- Server version	5.7.36

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `t_article`
--

DROP TABLE IF EXISTS `t_article`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `t_article` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `title_` varchar(100) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '标题',
  `content_` longtext COLLATE utf8mb4_unicode_ci COMMENT '文章内容',
  `reprint_` tinyint(1) DEFAULT NULL COMMENT '是否转载',
  `reprint_url` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '转载文章的地址',
  `topic_id` bigint(20) DEFAULT NULL COMMENT '所属栏目',
  `published_` tinyint(1) DEFAULT '0' COMMENT '文章是否发布',
  `deleted_` tinyint(1) NOT NULL DEFAULT '0' COMMENT '是否删除。0=未删除，1=已删除',
  `created_by` varchar(20) COLLATE utf8mb4_unicode_ci DEFAULT '0' COMMENT '创建人',
  `update_by` varchar(20) COLLATE utf8mb4_unicode_ci DEFAULT '0' COMMENT '变更人',
  `created_time` datetime DEFAULT NULL COMMENT '创建时间',
  `update_time` datetime DEFAULT NULL COMMENT '变更时间',
  `published_time` date DEFAULT NULL COMMENT '文章发布时间',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=16 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT='文章';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `t_article`
--

LOCK TABLES `t_article` WRITE;
/*!40000 ALTER TABLE `t_article` DISABLE KEYS */;
INSERT INTO `t_article` VALUES (1,'MD','# ai-platform 升级文档\r\n\r\n## 升级SC全家桶版本\r\n\r\n升级项目根目录下的`Spring Boot`、`Spring Cloud`、`Spring Cloud Alibaba`的版本。\r\n\r\n![](assets/2.png)\r\n\r\n```xml\r\n<properties>\r\n    ...\r\n<spring-boot.version>2.6.3</spring-boot.version>\r\n<spring-cloud.version>2021.0.1</spring-cloud.version>\r\n<spring-cloud-alibaba.version>2021.0.1.0</spring-cloud-alibaba.version>\r\n    ...\r\n</properties>\r\n```\r\n\r\n升级Spring boot admin的版本：\r\n\r\n```XML\r\n<properties>\r\n    ...\r\n	<spring-boot-admin.version>2.6.2</spring-boot-admin.version>\r\n    ...\r\n</properties>\r\n```\r\n\r\n\r\n\r\n## 可读取Sping Cloud Alibaba 配置\r\n\r\n修改根目录下的`pom.xml`的依赖，能够读取到`bootstart.yml`文件。\r\n\r\n![](assets/3.png)\r\n\r\n```XML\r\n<dependencies>\r\n    <dependency>\r\n        <groupId>org.springframework.cloud</groupId>\r\n        <artifactId>spring-cloud-context</artifactId>\r\n    </dependency>\r\n    <dependency>\r\n        <groupId>org.springframework.cloud</groupId>\r\n        <artifactId>spring-cloud-starter-bootstrap</artifactId>\r\n    </dependency>\r\n</dependencies>\r\n```\r\n\r\n## 升级配置PageHelper\r\n\r\n![](assets/2.png)\r\n\r\n```xml\r\n<!--\r\n<pagehelper.boot.version>1.3.0</pagehelper.boot.version>\r\n-->\r\n<pagehelper.boot.version>1.4.1</pagehelper.boot.version>\r\n```\r\n\r\n## 删除`common-pool2`的依赖\r\n\r\n1. 删除根目录下`pom.xml`文件中`commons-pool2`的依赖\r\n\r\n![](assets/2.png)\r\n\r\n删除以下内容：\r\n\r\n+ common-pool.version\r\n+ dependencyManagement中的commons-pool2依赖\r\n\r\n```XML\r\n<properties>\r\n    <!-- 删除以下内容 -->\r\n    <!--\r\n    <common-pool.version>2.6.2</common-pool.version>\r\n	-->\r\n</properties>\r\n...\r\n<dependencyManagement>\r\n    <dependencies>		\r\n        <!-- 删除以下内容 -->\r\n        <!-- 公共资源池 -->\r\n        <!--\r\n		<dependency>\r\n            <groupId>org.apache.commons</groupId>\r\n            <artifactId>commons-pool2</artifactId>\r\n            <version>${common-pool.version}</version>\r\n        </dependency>\r\n		-->\r\n    </dependencies>\r\n...\r\n```\r\n\r\n2. 删除 `ruoyi-common-core `模块`pom.xml`中的`commons-pool2`\r\n\r\n![](assets/4.png)\r\n\r\n+ 删除commons-pool2的依赖\r\n\r\n```xml\r\n...\r\n<!-- 删除 -->\r\n<!-- Apache Commons Pool2 -->\r\n<!--\r\n<dependency>\r\n    <groupId>org.apache.commons</groupId>\r\n    <artifactId>commons-pool2</artifactId>\r\n</dependency>\r\n-->\r\n...\r\n```\r\n\r\n## 升级负载均衡器\r\n\r\n`ruoyi-common-core`模块的`pom.xml`文件中增加`spring-cloud-starter-loadbalancer`。\r\n\r\n```xml\r\n<!-- SpringCloud Loadbalancer -->\r\n<dependency>\r\n    <groupId>org.springframework.cloud</groupId>\r\n    <artifactId>spring-cloud-starter-loadbalancer</artifactId>\r\n</dependency>  \r\n```\r\n\r\n## 修复Seata循环依赖\r\n\r\n1. 在`ruoyi-common/ruoyi-common-datasource`模块下新增 `ApplicationSeataInitializer.java`。\r\n\r\n![](assets/1.png)\r\n\r\n内容为：\r\n\r\n```java\r\npackage com.ruoyi.common.datasource.env;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.env.EnvironmentPostProcessor;\r\nimport org.springframework.core.Ordered;\r\nimport org.springframework.core.env.ConfigurableEnvironment;\r\n\r\n/**\r\n * seata 在 springboot 2.6.x 存在循环引用问题的处理\r\n *\r\n * @author ruoyi\r\n */\r\npublic class ApplicationSeataInitializer implements EnvironmentPostProcessor, Ordered {\r\n    @Override\r\n    public void postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application) {\r\n        System.setProperty(\"spring.main.allow-circular-references\", \"true\");\r\n    }\r\n\r\n    @Override\r\n    public int getOrder() {\r\n        return Ordered.LOWEST_PRECEDENCE;\r\n    }\r\n}\r\n```\r\n\r\n2. 在`ruoyi-common/ruoyi-common-datasource`模块新增`src/main/resources/META-INF/spring.factories`文件。内容为：\r\n\r\n```properties\r\norg.springframework.boot.env.EnvironmentPostProcessor=\\\r\n    com.ruoyi.common.datasource.env.ApplicationSeataInitializer\r\n```\r\n\r\n## 停用 swagger\r\n\r\n1. `ruoyi-common-swagger`模块禁止`SwaggerAutoConfiguration` 自动装载。\r\n\r\n   注释掉`com.ruoyi.common.swagger.config.SwaggerAutoConfiguration`类中的`@Configuration`和`@EnableAutoConfiguration`。如下：\r\n\r\n```java\r\n//@Configuration\r\n@EnableSwagger2\r\n//@EnableAutoConfiguration\r\n@ConditionalOnProperty(name = \"swagger.enabled\", matchIfMissing = true)\r\npublic class SwaggerAutoConfiguration\r\n{\r\n    ...\r\n}\r\n```\r\n\r\n2. 修改`ruoyi-common/ruoyi-common-swagger/src/main/resources/META-INF/spring.factories`,如下：\r\n\r\n```properties\r\n#org.springframework.boot.autoconfigure.EnableAutoConfiguration=\\\r\n  com.ruoyi.common.swagger.config.SwaggerAutoConfiguration\r\n```\r\n\r\n**以下部分需要在每个模块中进行修改**\r\n\r\n需要修改的模块：\r\n\r\n1. ruoyi-system\r\n2. ruoyi-file\r\n3. ruoyi-gen\r\n4. ruoyi-job\r\n\r\n各个模块的`bootstrap.yml`设置enabled为false。\r\n\r\n```yaml\r\n# swagger配置\r\nswagger:\r\n  enabled: false\r\n```\r\n\r\n去掉模块的自动装配注解`@EnableCustomSwagger2`。\r\n\r\n```JAVA\r\n@EnableCustomConfig\r\n//@EnableCustomSwagger2\r\n@EnableRyFeignClients\r\n@SpringBootApplication\r\npublic class RuoYiSystemApplication {\r\n    ...\r\n}\r\n```\r\n\r\n## 替换@SpringCloudApplication\r\n\r\n需要替换的模块包括：\r\n\r\n1. ruoyi-auth \r\n   + 该模块不依赖于数据库，修改为`@SpringBootApplication(exclude = {DataSourceAutoConfiguration.class })`\r\n2. ruoyi-system\r\n3.  ruoyi-gen\r\n4.  ruoyi-job\r\n\r\n将模块的`@SpringCloudApplication`替换为`@SpringBootApplication`\r\n\r\n```java\r\n@EnableCustomConfig\r\n//@EnableCustomSwagger2\r\n@EnableRyFeignClients\r\n//@SpringCloudApplication\r\n@SpringBootApplication\r\npublic class RuoYiSystemApplication {\r\n    ...\r\n}\r\n```\r\n\r\n## 升级Tomcat（可选）\r\n\r\n当前SC全家桶的tomcat版本高于脚手架的版本，可选择进行升级，方法如下：\r\n\r\n![](assets/2.png)\r\n\r\n1. 删除根目录下的tomcat相关的配置。\r\n\r\n+ 删除properties中的tomcat版本\r\n+ 删除dependencyManagement中的spring web设置\r\n\r\n```XML\r\n <properties>\r\n<!-- <tomcat.version>9.0.54</tomcat.version> -->\r\n </properties>\r\n <dependencyManagement>\r\n        <dependencies>\r\n            ...\r\n            <!-- Spring Web-->\r\n            <!--\r\n            <dependency>\r\n                <groupId>org.springframework.boot</groupId>\r\n                <artifactId>spring-boot-starter-web</artifactId>\r\n                <exclusions>\r\n                    <exclusion>\r\n                        <groupId>org.springframework.boot</groupId>\r\n                        <artifactId>spring-boot-starter-tomcat</artifactId>\r\n                    </exclusion>\r\n                    <exclusion>\r\n                        <groupId>org.apache.tomcat.embed</groupId>\r\n                        <artifactId>tomcat-embed-core</artifactId>\r\n                    </exclusion>\r\n                    <exclusion>\r\n                        <groupId>org.apache.tomcat</groupId>\r\n                        <artifactId>tomcat-annotations-api</artifactId>\r\n                    </exclusion>\r\n                    <exclusion>\r\n                        <groupId>org.apache.tomcat.embed</groupId>\r\n                        <artifactId>tomcat-embed-websocket</artifactId>\r\n                    </exclusion>\r\n\r\n                </exclusions>\r\n            </dependency>\r\n			-->\r\n            ...\r\n     </dependencies>\r\n</dependencyManagement>\r\n```\r\n\r\n2. ruoyi-auth模块删除tomcat相关依赖，检查是否存在spring-boot-starter-web，如果不存在则添加。\r\n\r\n```xml\r\n<!--\r\n<dependency>\r\n	<groupId>org.apache.tomcat.embed</groupId>\r\n	<artifactId>tomcat-embed-core</artifactId>\r\n</dependency>\r\n<dependency>\r\n	<groupId>org.apache.tomcat</groupId>\r\n	<artifactId>tomcat-annotations-api</artifactId>\r\n</dependency>\r\n<dependency>\r\n	<groupId>org.apache.tomcat.embed</groupId>\r\n	<artifactId>tomcat-embed-websocket</artifactId>\r\n</dependency>\r\n<dependency>\r\n	<groupId>org.apache.tomcat.embed</groupId>\r\n	<artifactId>tomcat-embed-el</artifactId>\r\n</dependency>\r\n-->\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n```\r\n\r\n3. ruoyi-file模块删除tomcat相关依赖，检查是否存在spring-boot-starter-web，如果不存在则添加。\r\n\r\n```xml\r\n<!-- SpringBoot Web -->\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n<!-- \r\n<dependency>\r\n	<groupId>org.apache.tomcat.embed</groupId>\r\n    <artifactId>tomcat-embed-core</artifactId>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.apache.tomcat</groupId>\r\n    <artifactId>tomcat-annotations-api</artifactId>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.apache.tomcat.embed</groupId>\r\n    <artifactId>tomcat-embed-websocket</artifactId>\r\n</dependency>\r\n-->\r\n```\r\n\r\n4. ruoyi-gen模块删除tomcat相关依赖，检查是否存在spring-boot-starter-web，如果不存在则添加。\r\n\r\n```xml\r\n<!-- SpringBoot Web -->\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n<!--\r\n<dependency>\r\n	<groupId>org.apache.tomcat.embed</groupId>\r\n	<artifactId>tomcat-embed-core</artifactId>\r\n</dependency>\r\n<dependency>\r\n	<groupId>org.apache.tomcat</groupId>\r\n	<artifactId>tomcat-annotations-api</artifactId>\r\n</dependency>\r\n<dependency>\r\n	<groupId>org.apache.tomcat.embed</groupId>\r\n	<artifactId>tomcat-embed-websocket</artifactId>\r\n</dependency>\r\n-->\r\n```\r\n\r\n5. ruoyi-job模块删除tomcat相关依赖，检查是否存在spring-boot-starter-web，如果不存在则添加。\r\n\r\n```xml\r\n<!-- SpringBoot Web -->\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n<!--\r\n<dependency>\r\n	<groupId>org.apache.tomcat.embed</groupId>\r\n	<artifactId>tomcat-embed-core</artifactId>\r\n</dependency>\r\n<dependency>\r\n	<groupId>org.apache.tomcat</groupId>\r\n	<artifactId>tomcat-annotations-api</artifactId>\r\n</dependency>\r\n<dependency>\r\n	<groupId>org.apache.tomcat.embed</groupId>\r\n	<artifactId>tomcat-embed-websocket</artifactId>\r\n</dependency>\r\n-->\r\n```\r\n\r\n6. ruoyi-system模块删除tomcat相关依赖，检查是否存在spring-boot-starter-web，如果不存在则添加。\r\n\r\n```xml\r\n<!-- SpringBoot Web -->\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n<!--\r\n<dependency>\r\n	<groupId>org.apache.tomcat.embed</groupId>\r\n	<artifactId>tomcat-embed-core</artifactId>\r\n</dependency>\r\n<dependency>\r\n	<groupId>org.apache.tomcat</groupId>\r\n	<artifactId>tomcat-annotations-api</artifactId>\r\n</dependency>\r\n<dependency>\r\n	<groupId>org.apache.tomcat.embed</groupId>\r\n	<artifactId>tomcat-embed-websocket</artifactId>\r\n</dependency>\r\n-->\r\n```\r\n\r\n## 验证\r\n\r\n1. 检查各个服务是否能正常启动\r\n2. 在项目根目录下执行`mvn dependency:tree > upgrade.log` 检查`spring-cloud-starter-gateway`的版本是否为3.1.1。\r\n',0,'',4,1,0,'0','0','2022-03-29 07:39:07',NULL,'2022-03-29'),(2,'测试文章1','---\r\n__Advertisement :)__\r\n\r\n- __[pica](https://nodeca.github.io/pica/demo/)__ - high quality and fast image\r\n  resize in browser.\r\n- __[babelfish](https://github.com/nodeca/babelfish/)__ - developer friendly\r\n  i18n with plurals support and easy syntax.\r\n\r\nYou will like those projects!\r\n\r\n---\r\n\r\n# h1 Heading 8-)\r\n## h2 Heading\r\n### h3 Heading\r\n#### h4 Heading\r\n##### h5 Heading\r\n###### h6 Heading\r\n\r\n\r\n## Horizontal Rules\r\n\r\n___\r\n\r\n---\r\n\r\n***\r\n\r\n\r\n## Typographic replacements\r\n\r\nEnable typographer option to see result.\r\n\r\n(c) (C) (r) (R) (tm) (TM) (p) (P) +-\r\n\r\ntest.. test... test..... test?..... test!....\r\n\r\n!!!!!! ???? ,,  -- ---\r\n\r\n\"Smartypants, double quotes\" and \'single quotes\'\r\n\r\n\r\n## Emphasis\r\n\r\n**This is bold text**\r\n\r\n__This is bold text__\r\n\r\n*This is italic text*\r\n\r\n_This is italic text_\r\n\r\n~~Strikethrough~~\r\n\r\n\r\n## Blockquotes\r\n\r\n\r\n> Blockquotes can also be nested...\r\n>> ...by using additional greater-than signs right next to each other...\r\n> > > ...or with spaces between arrows.\r\n\r\n\r\n## Lists\r\n\r\nUnordered\r\n\r\n+ Create a list by starting a line with `+`, `-`, or `*`\r\n+ Sub-lists are made by indenting 2 spaces:\r\n  - Marker character change forces new list start:\r\n    * Ac tristique libero volutpat at\r\n    + Facilisis in pretium nisl aliquet\r\n    - Nulla volutpat aliquam velit\r\n+ Very easy!\r\n\r\nOrdered\r\n\r\n1. Lorem ipsum dolor sit amet\r\n2. Consectetur adipiscing elit\r\n3. Integer molestie lorem at massa\r\n\r\n\r\n1. You can use sequential numbers...\r\n1. ...or keep all the numbers as `1.`\r\n\r\nStart numbering with offset:\r\n\r\n57. foo\r\n1. bar\r\n\r\n\r\n## Code\r\n\r\nInline `code`\r\n\r\nIndented code\r\n\r\n    // Some comments\r\n    line 1 of code\r\n    line 2 of code\r\n    line 3 of code\r\n\r\n\r\nBlock code \"fences\"\r\n\r\n```\r\nSample text here...\r\n```\r\n\r\nSyntax highlighting\r\n\r\n``` js\r\nvar foo = function (bar) {\r\n  return bar++;\r\n};\r\n\r\nconsole.log(foo(5));\r\n```\r\n\r\n## Tables\r\n\r\n| Option | Description |\r\n| ------ | ----------- |\r\n| data   | path to data files to supply the data that will be passed into templates. |\r\n| engine | engine to be used for processing templates. Handlebars is the default. |\r\n| ext    | extension to be used for dest files. |\r\n\r\nRight aligned columns\r\n\r\n| Option | Description |\r\n| ------:| -----------:|\r\n| data   | path to data files to supply the data that will be passed into templates. |\r\n| engine | engine to be used for processing templates. Handlebars is the default. |\r\n| ext    | extension to be used for dest files. |\r\n\r\n\r\n## Links\r\n\r\n[link text](http://dev.nodeca.com)\r\n\r\n[link with title](http://nodeca.github.io/pica/demo/ \"title text!\")\r\n\r\nAutoconverted link https://github.com/nodeca/pica (enable linkify to see)\r\n\r\n\r\n## Images\r\n\r\n![Minion](https://octodex.github.com/images/minion.png)\r\n![Stormtroopocat](https://octodex.github.com/images/stormtroopocat.jpg \"The Stormtroopocat\")\r\n\r\nLike links, Images also have a footnote style syntax\r\n\r\n![Alt text][id]\r\n\r\nWith a reference later in the document defining the URL location:\r\n\r\n[id]: https://octodex.github.com/images/dojocat.jpg  \"The Dojocat\"\r\n\r\n\r\n## Plugins\r\n\r\nThe killer feature of `markdown-it` is very effective support of\r\n[syntax plugins](https://www.npmjs.org/browse/keyword/markdown-it-plugin).\r\n\r\n\r\n### [Emojies](https://github.com/markdown-it/markdown-it-emoji)\r\n\r\n> Classic markup: :wink: :crush: :cry: :tear: :laughing: :yum:\r\n>\r\n> Shortcuts (emoticons): :-) :-( 8-) ;)\r\n\r\nsee [how to change output](https://github.com/markdown-it/markdown-it-emoji#change-output) with twemoji.\r\n\r\n\r\n### [Subscript](https://github.com/markdown-it/markdown-it-sub) / [Superscript](https://github.com/markdown-it/markdown-it-sup)\r\n\r\n- 19^th^\r\n- H~2~O\r\n\r\n\r\n### [\\<ins>](https://github.com/markdown-it/markdown-it-ins)\r\n\r\n++Inserted text++\r\n\r\n\r\n### [\\<mark>](https://github.com/markdown-it/markdown-it-mark)\r\n\r\n==Marked text==\r\n\r\n\r\n### [Footnotes](https://github.com/markdown-it/markdown-it-footnote)\r\n\r\nFootnote 1 link[^first].\r\n\r\nFootnote 2 link[^second].\r\n\r\nInline footnote^[Text of inline footnote] definition.\r\n\r\nDuplicated footnote reference[^second].\r\n\r\n[^first]: Footnote **can have markup**\r\n\r\n    and multiple paragraphs.\r\n\r\n[^second]: Footnote text.\r\n\r\n\r\n### [Definition lists](https://github.com/markdown-it/markdown-it-deflist)\r\n\r\nTerm 1\r\n\r\n:   Definition 1\r\nwith lazy continuation.\r\n\r\nTerm 2 with *inline markup*\r\n\r\n:   Definition 2\r\n\r\n        { some code, part of Definition 2 }\r\n\r\n    Third paragraph of definition 2.\r\n\r\n_Compact style:_\r\n\r\nTerm 1\r\n  ~ Definition 1\r\n\r\nTerm 2\r\n  ~ Definition 2a\r\n  ~ Definition 2b\r\n\r\n\r\n### [Abbreviations](https://github.com/markdown-it/markdown-it-abbr)\r\n\r\nThis is HTML abbreviation example.\r\n\r\nIt converts \"HTML\", but keep intact partial entries like \"xxxHTMLyyy\" and so on.\r\n\r\n*[HTML]: Hyper Text Markup Language\r\n\r\n### [Custom containers](https://github.com/markdown-it/markdown-it-container)\r\n\r\n::: warning\r\n*here be dragons*\r\n:::\r\n',0,'',4,1,0,'0','0','2022-03-29 07:39:19','2022-03-29 07:39:32','2022-03-29'),(3,'测试文章','# ai-platform 升级文档\r\n\r\n## 升级SC全家桶版本\r\n\r\n升级项目根目录下的`Spring Boot`、`Spring Cloud`、`Spring Cloud Alibaba`的版本。\r\n\r\n![](assets/2.png)\r\n\r\n```xml\r\n<properties>\r\n    ...\r\n<spring-boot.version>2.6.3</spring-boot.version>\r\n<spring-cloud.version>2021.0.1</spring-cloud.version>\r\n<spring-cloud-alibaba.version>2021.0.1.0</spring-cloud-alibaba.version>\r\n    ...\r\n</properties>\r\n```\r\n\r\n升级Spring boot admin的版本：\r\n\r\n```XML\r\n<properties>\r\n    ...\r\n	<spring-boot-admin.version>2.6.2</spring-boot-admin.version>\r\n    ...\r\n</properties>\r\n```\r\n\r\n\r\n\r\n## 可读取Sping Cloud Alibaba 配置\r\n\r\n修改根目录下的`pom.xml`的依赖，能够读取到`bootstart.yml`文件。\r\n\r\n![](assets/3.png)\r\n\r\n```XML\r\n<dependencies>\r\n    <dependency>\r\n        <groupId>org.springframework.cloud</groupId>\r\n        <artifactId>spring-cloud-context</artifactId>\r\n    </dependency>\r\n    <dependency>\r\n        <groupId>org.springframework.cloud</groupId>\r\n        <artifactId>spring-cloud-starter-bootstrap</artifactId>\r\n    </dependency>\r\n</dependencies>\r\n```\r\n\r\n## 升级配置PageHelper\r\n\r\n![](assets/2.png)\r\n\r\n```xml\r\n<!--\r\n<pagehelper.boot.version>1.3.0</pagehelper.boot.version>\r\n-->\r\n<pagehelper.boot.version>1.4.1</pagehelper.boot.version>\r\n```\r\n\r\n## 删除`common-pool2`的依赖\r\n\r\n1. 删除根目录下`pom.xml`文件中`commons-pool2`的依赖\r\n\r\n![](assets/2.png)\r\n\r\n删除以下内容：\r\n\r\n+ common-pool.version\r\n+ dependencyManagement中的commons-pool2依赖\r\n\r\n```XML\r\n<properties>\r\n    <!-- 删除以下内容 -->\r\n    <!--\r\n    <common-pool.version>2.6.2</common-pool.version>\r\n	-->\r\n</properties>\r\n...\r\n<dependencyManagement>\r\n    <dependencies>		\r\n        <!-- 删除以下内容 -->\r\n        <!-- 公共资源池 -->\r\n        <!--\r\n		<dependency>\r\n            <groupId>org.apache.commons</groupId>\r\n            <artifactId>commons-pool2</artifactId>\r\n            <version>${common-pool.version}</version>\r\n        </dependency>\r\n		-->\r\n    </dependencies>\r\n...\r\n```\r\n\r\n2. 删除 `ruoyi-common-core `模块`pom.xml`中的`commons-pool2`\r\n\r\n![](assets/4.png)\r\n\r\n+ 删除commons-pool2的依赖\r\n\r\n```xml\r\n...\r\n<!-- 删除 -->\r\n<!-- Apache Commons Pool2 -->\r\n<!--\r\n<dependency>\r\n    <groupId>org.apache.commons</groupId>\r\n    <artifactId>commons-pool2</artifactId>\r\n</dependency>\r\n-->\r\n...\r\n```\r\n\r\n## 升级负载均衡器\r\n\r\n`ruoyi-common-core`模块的`pom.xml`文件中增加`spring-cloud-starter-loadbalancer`。\r\n\r\n```xml\r\n<!-- SpringCloud Loadbalancer -->\r\n<dependency>\r\n    <groupId>org.springframework.cloud</groupId>\r\n    <artifactId>spring-cloud-starter-loadbalancer</artifactId>\r\n</dependency>  \r\n```\r\n\r\n## 修复Seata循环依赖\r\n\r\n1. 在`ruoyi-common/ruoyi-common-datasource`模块下新增 `ApplicationSeataInitializer.java`。\r\n\r\n![](assets/1.png)\r\n\r\n内容为：\r\n\r\n```java\r\npackage com.ruoyi.common.datasource.env;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.env.EnvironmentPostProcessor;\r\nimport org.springframework.core.Ordered;\r\nimport org.springframework.core.env.ConfigurableEnvironment;\r\n\r\n/**\r\n * seata 在 springboot 2.6.x 存在循环引用问题的处理\r\n *\r\n * @author ruoyi\r\n */\r\npublic class ApplicationSeataInitializer implements EnvironmentPostProcessor, Ordered {\r\n    @Override\r\n    public void postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application) {\r\n        System.setProperty(\"spring.main.allow-circular-references\", \"true\");\r\n    }\r\n\r\n    @Override\r\n    public int getOrder() {\r\n        return Ordered.LOWEST_PRECEDENCE;\r\n    }\r\n}\r\n```\r\n\r\n2. 在`ruoyi-common/ruoyi-common-datasource`模块新增`src/main/resources/META-INF/spring.factories`文件。内容为：\r\n\r\n```properties\r\norg.springframework.boot.env.EnvironmentPostProcessor=\\\r\n    com.ruoyi.common.datasource.env.ApplicationSeataInitializer\r\n```\r\n\r\n## 停用 swagger\r\n\r\n1. `ruoyi-common-swagger`模块禁止`SwaggerAutoConfiguration` 自动装载。\r\n\r\n   注释掉`com.ruoyi.common.swagger.config.SwaggerAutoConfiguration`类中的`@Configuration`和`@EnableAutoConfiguration`。如下：\r\n\r\n```java\r\n//@Configuration\r\n@EnableSwagger2\r\n//@EnableAutoConfiguration\r\n@ConditionalOnProperty(name = \"swagger.enabled\", matchIfMissing = true)\r\npublic class SwaggerAutoConfiguration\r\n{\r\n    ...\r\n}\r\n```\r\n\r\n2. 修改`ruoyi-common/ruoyi-common-swagger/src/main/resources/META-INF/spring.factories`,如下：\r\n\r\n```properties\r\n#org.springframework.boot.autoconfigure.EnableAutoConfiguration=\\\r\n  com.ruoyi.common.swagger.config.SwaggerAutoConfiguration\r\n```\r\n\r\n**以下部分需要在每个模块中进行修改**\r\n\r\n需要修改的模块：\r\n\r\n1. ruoyi-system\r\n2. ruoyi-file\r\n3. ruoyi-gen\r\n4. ruoyi-job\r\n\r\n各个模块的`bootstrap.yml`设置enabled为false。\r\n\r\n```yaml\r\n# swagger配置\r\nswagger:\r\n  enabled: false\r\n```\r\n\r\n去掉模块的自动装配注解`@EnableCustomSwagger2`。\r\n\r\n```JAVA\r\n@EnableCustomConfig\r\n//@EnableCustomSwagger2\r\n@EnableRyFeignClients\r\n@SpringBootApplication\r\npublic class RuoYiSystemApplication {\r\n    ...\r\n}\r\n```\r\n\r\n## 替换@SpringCloudApplication\r\n\r\n需要替换的模块包括：\r\n\r\n1. ruoyi-auth \r\n   + 该模块不依赖于数据库，修改为`@SpringBootApplication(exclude = {DataSourceAutoConfiguration.class })`\r\n2. ruoyi-system\r\n3.  ruoyi-gen\r\n4.  ruoyi-job\r\n\r\n将模块的`@SpringCloudApplication`替换为`@SpringBootApplication`\r\n\r\n```java\r\n@EnableCustomConfig\r\n//@EnableCustomSwagger2\r\n@EnableRyFeignClients\r\n//@SpringCloudApplication\r\n@SpringBootApplication\r\npublic class RuoYiSystemApplication {\r\n    ...\r\n}\r\n```\r\n\r\n## 升级Tomcat（可选）\r\n\r\n当前SC全家桶的tomcat版本高于脚手架的版本，可选择进行升级，方法如下：\r\n\r\n![](assets/2.png)\r\n\r\n1. 删除根目录下的tomcat相关的配置。\r\n\r\n+ 删除properties中的tomcat版本\r\n+ 删除dependencyManagement中的spring web设置\r\n\r\n```XML\r\n <properties>\r\n<!-- <tomcat.version>9.0.54</tomcat.version> -->\r\n </properties>\r\n <dependencyManagement>\r\n        <dependencies>\r\n            ...\r\n            <!-- Spring Web-->\r\n            <!--\r\n            <dependency>\r\n                <groupId>org.springframework.boot</groupId>\r\n                <artifactId>spring-boot-starter-web</artifactId>\r\n                <exclusions>\r\n                    <exclusion>\r\n                        <groupId>org.springframework.boot</groupId>\r\n                        <artifactId>spring-boot-starter-tomcat</artifactId>\r\n                    </exclusion>\r\n                    <exclusion>\r\n                        <groupId>org.apache.tomcat.embed</groupId>\r\n                        <artifactId>tomcat-embed-core</artifactId>\r\n                    </exclusion>\r\n                    <exclusion>\r\n                        <groupId>org.apache.tomcat</groupId>\r\n                        <artifactId>tomcat-annotations-api</artifactId>\r\n                    </exclusion>\r\n                    <exclusion>\r\n                        <groupId>org.apache.tomcat.embed</groupId>\r\n                        <artifactId>tomcat-embed-websocket</artifactId>\r\n                    </exclusion>\r\n\r\n                </exclusions>\r\n            </dependency>\r\n			-->\r\n            ...\r\n     </dependencies>\r\n</dependencyManagement>\r\n```\r\n\r\n2. ruoyi-auth模块删除tomcat相关依赖，检查是否存在spring-boot-starter-web，如果不存在则添加。\r\n\r\n```xml\r\n<!--\r\n<dependency>\r\n	<groupId>org.apache.tomcat.embed</groupId>\r\n	<artifactId>tomcat-embed-core</artifactId>\r\n</dependency>\r\n<dependency>\r\n	<groupId>org.apache.tomcat</groupId>\r\n	<artifactId>tomcat-annotations-api</artifactId>\r\n</dependency>\r\n<dependency>\r\n	<groupId>org.apache.tomcat.embed</groupId>\r\n	<artifactId>tomcat-embed-websocket</artifactId>\r\n</dependency>\r\n<dependency>\r\n	<groupId>org.apache.tomcat.embed</groupId>\r\n	<artifactId>tomcat-embed-el</artifactId>\r\n</dependency>\r\n-->\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n```\r\n\r\n3. ruoyi-file模块删除tomcat相关依赖，检查是否存在spring-boot-starter-web，如果不存在则添加。\r\n\r\n```xml\r\n<!-- SpringBoot Web -->\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n<!-- \r\n<dependency>\r\n	<groupId>org.apache.tomcat.embed</groupId>\r\n    <artifactId>tomcat-embed-core</artifactId>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.apache.tomcat</groupId>\r\n    <artifactId>tomcat-annotations-api</artifactId>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.apache.tomcat.embed</groupId>\r\n    <artifactId>tomcat-embed-websocket</artifactId>\r\n</dependency>\r\n-->\r\n```\r\n\r\n4. ruoyi-gen模块删除tomcat相关依赖，检查是否存在spring-boot-starter-web，如果不存在则添加。\r\n\r\n```xml\r\n<!-- SpringBoot Web -->\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n<!--\r\n<dependency>\r\n	<groupId>org.apache.tomcat.embed</groupId>\r\n	<artifactId>tomcat-embed-core</artifactId>\r\n</dependency>\r\n<dependency>\r\n	<groupId>org.apache.tomcat</groupId>\r\n	<artifactId>tomcat-annotations-api</artifactId>\r\n</dependency>\r\n<dependency>\r\n	<groupId>org.apache.tomcat.embed</groupId>\r\n	<artifactId>tomcat-embed-websocket</artifactId>\r\n</dependency>\r\n-->\r\n```\r\n\r\n5. ruoyi-job模块删除tomcat相关依赖，检查是否存在spring-boot-starter-web，如果不存在则添加。\r\n\r\n```xml\r\n<!-- SpringBoot Web -->\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n<!--\r\n<dependency>\r\n	<groupId>org.apache.tomcat.embed</groupId>\r\n	<artifactId>tomcat-embed-core</artifactId>\r\n</dependency>\r\n<dependency>\r\n	<groupId>org.apache.tomcat</groupId>\r\n	<artifactId>tomcat-annotations-api</artifactId>\r\n</dependency>\r\n<dependency>\r\n	<groupId>org.apache.tomcat.embed</groupId>\r\n	<artifactId>tomcat-embed-websocket</artifactId>\r\n</dependency>\r\n-->\r\n```\r\n\r\n6. ruoyi-system模块删除tomcat相关依赖，检查是否存在spring-boot-starter-web，如果不存在则添加。\r\n\r\n```xml\r\n<!-- SpringBoot Web -->\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n<!--\r\n<dependency>\r\n	<groupId>org.apache.tomcat.embed</groupId>\r\n	<artifactId>tomcat-embed-core</artifactId>\r\n</dependency>\r\n<dependency>\r\n	<groupId>org.apache.tomcat</groupId>\r\n	<artifactId>tomcat-annotations-api</artifactId>\r\n</dependency>\r\n<dependency>\r\n	<groupId>org.apache.tomcat.embed</groupId>\r\n	<artifactId>tomcat-embed-websocket</artifactId>\r\n</dependency>\r\n-->\r\n```\r\n\r\n## 验证\r\n\r\n1. 检查各个服务是否能正常启动\r\n2. 在项目根目录下执行`mvn dependency:tree > upgrade.log` 检查`spring-cloud-starter-gateway`的版本是否为3.1.1。\r\n',0,'',4,1,0,'0','0','2022-03-29 07:39:07',NULL,'2022-03-29'),(4,'测试文章','# ai-platform 升级文档\r\n\r\n## 升级SC全家桶版本\r\n\r\n升级项目根目录下的`Spring Boot`、`Spring Cloud`、`Spring Cloud Alibaba`的版本。\r\n\r\n![](assets/2.png)\r\n\r\n```xml\r\n<properties>\r\n    ...\r\n<spring-boot.version>2.6.3</spring-boot.version>\r\n<spring-cloud.version>2021.0.1</spring-cloud.version>\r\n<spring-cloud-alibaba.version>2021.0.1.0</spring-cloud-alibaba.version>\r\n    ...\r\n</properties>\r\n```\r\n\r\n升级Spring boot admin的版本：\r\n\r\n```XML\r\n<properties>\r\n    ...\r\n	<spring-boot-admin.version>2.6.2</spring-boot-admin.version>\r\n    ...\r\n</properties>\r\n```\r\n\r\n\r\n\r\n## 可读取Sping Cloud Alibaba 配置\r\n\r\n修改根目录下的`pom.xml`的依赖，能够读取到`bootstart.yml`文件。\r\n\r\n![](assets/3.png)\r\n\r\n```XML\r\n<dependencies>\r\n    <dependency>\r\n        <groupId>org.springframework.cloud</groupId>\r\n        <artifactId>spring-cloud-context</artifactId>\r\n    </dependency>\r\n    <dependency>\r\n        <groupId>org.springframework.cloud</groupId>\r\n        <artifactId>spring-cloud-starter-bootstrap</artifactId>\r\n    </dependency>\r\n</dependencies>\r\n```\r\n\r\n## 升级配置PageHelper\r\n\r\n![](assets/2.png)\r\n\r\n```xml\r\n<!--\r\n<pagehelper.boot.version>1.3.0</pagehelper.boot.version>\r\n-->\r\n<pagehelper.boot.version>1.4.1</pagehelper.boot.version>\r\n```\r\n\r\n## 删除`common-pool2`的依赖\r\n\r\n1. 删除根目录下`pom.xml`文件中`commons-pool2`的依赖\r\n\r\n![](assets/2.png)\r\n\r\n删除以下内容：\r\n\r\n+ common-pool.version\r\n+ dependencyManagement中的commons-pool2依赖\r\n\r\n```XML\r\n<properties>\r\n    <!-- 删除以下内容 -->\r\n    <!--\r\n    <common-pool.version>2.6.2</common-pool.version>\r\n	-->\r\n</properties>\r\n...\r\n<dependencyManagement>\r\n    <dependencies>		\r\n        <!-- 删除以下内容 -->\r\n        <!-- 公共资源池 -->\r\n        <!--\r\n		<dependency>\r\n            <groupId>org.apache.commons</groupId>\r\n            <artifactId>commons-pool2</artifactId>\r\n            <version>${common-pool.version}</version>\r\n        </dependency>\r\n		-->\r\n    </dependencies>\r\n...\r\n```\r\n\r\n2. 删除 `ruoyi-common-core `模块`pom.xml`中的`commons-pool2`\r\n\r\n![](assets/4.png)\r\n\r\n+ 删除commons-pool2的依赖\r\n\r\n```xml\r\n...\r\n<!-- 删除 -->\r\n<!-- Apache Commons Pool2 -->\r\n<!--\r\n<dependency>\r\n    <groupId>org.apache.commons</groupId>\r\n    <artifactId>commons-pool2</artifactId>\r\n</dependency>\r\n-->\r\n...\r\n```\r\n\r\n## 升级负载均衡器\r\n\r\n`ruoyi-common-core`模块的`pom.xml`文件中增加`spring-cloud-starter-loadbalancer`。\r\n\r\n```xml\r\n<!-- SpringCloud Loadbalancer -->\r\n<dependency>\r\n    <groupId>org.springframework.cloud</groupId>\r\n    <artifactId>spring-cloud-starter-loadbalancer</artifactId>\r\n</dependency>  \r\n```\r\n\r\n## 修复Seata循环依赖\r\n\r\n1. 在`ruoyi-common/ruoyi-common-datasource`模块下新增 `ApplicationSeataInitializer.java`。\r\n\r\n![](assets/1.png)\r\n\r\n内容为：\r\n\r\n```java\r\npackage com.ruoyi.common.datasource.env;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.env.EnvironmentPostProcessor;\r\nimport org.springframework.core.Ordered;\r\nimport org.springframework.core.env.ConfigurableEnvironment;\r\n\r\n/**\r\n * seata 在 springboot 2.6.x 存在循环引用问题的处理\r\n *\r\n * @author ruoyi\r\n */\r\npublic class ApplicationSeataInitializer implements EnvironmentPostProcessor, Ordered {\r\n    @Override\r\n    public void postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application) {\r\n        System.setProperty(\"spring.main.allow-circular-references\", \"true\");\r\n    }\r\n\r\n    @Override\r\n    public int getOrder() {\r\n        return Ordered.LOWEST_PRECEDENCE;\r\n    }\r\n}\r\n```\r\n\r\n2. 在`ruoyi-common/ruoyi-common-datasource`模块新增`src/main/resources/META-INF/spring.factories`文件。内容为：\r\n\r\n```properties\r\norg.springframework.boot.env.EnvironmentPostProcessor=\\\r\n    com.ruoyi.common.datasource.env.ApplicationSeataInitializer\r\n```\r\n\r\n## 停用 swagger\r\n\r\n1. `ruoyi-common-swagger`模块禁止`SwaggerAutoConfiguration` 自动装载。\r\n\r\n   注释掉`com.ruoyi.common.swagger.config.SwaggerAutoConfiguration`类中的`@Configuration`和`@EnableAutoConfiguration`。如下：\r\n\r\n```java\r\n//@Configuration\r\n@EnableSwagger2\r\n//@EnableAutoConfiguration\r\n@ConditionalOnProperty(name = \"swagger.enabled\", matchIfMissing = true)\r\npublic class SwaggerAutoConfiguration\r\n{\r\n    ...\r\n}\r\n```\r\n\r\n2. 修改`ruoyi-common/ruoyi-common-swagger/src/main/resources/META-INF/spring.factories`,如下：\r\n\r\n```properties\r\n#org.springframework.boot.autoconfigure.EnableAutoConfiguration=\\\r\n  com.ruoyi.common.swagger.config.SwaggerAutoConfiguration\r\n```\r\n\r\n**以下部分需要在每个模块中进行修改**\r\n\r\n需要修改的模块：\r\n\r\n1. ruoyi-system\r\n2. ruoyi-file\r\n3. ruoyi-gen\r\n4. ruoyi-job\r\n\r\n各个模块的`bootstrap.yml`设置enabled为false。\r\n\r\n```yaml\r\n# swagger配置\r\nswagger:\r\n  enabled: false\r\n```\r\n\r\n去掉模块的自动装配注解`@EnableCustomSwagger2`。\r\n\r\n```JAVA\r\n@EnableCustomConfig\r\n//@EnableCustomSwagger2\r\n@EnableRyFeignClients\r\n@SpringBootApplication\r\npublic class RuoYiSystemApplication {\r\n    ...\r\n}\r\n```\r\n\r\n## 替换@SpringCloudApplication\r\n\r\n需要替换的模块包括：\r\n\r\n1. ruoyi-auth \r\n   + 该模块不依赖于数据库，修改为`@SpringBootApplication(exclude = {DataSourceAutoConfiguration.class })`\r\n2. ruoyi-system\r\n3.  ruoyi-gen\r\n4.  ruoyi-job\r\n\r\n将模块的`@SpringCloudApplication`替换为`@SpringBootApplication`\r\n\r\n```java\r\n@EnableCustomConfig\r\n//@EnableCustomSwagger2\r\n@EnableRyFeignClients\r\n//@SpringCloudApplication\r\n@SpringBootApplication\r\npublic class RuoYiSystemApplication {\r\n    ...\r\n}\r\n```\r\n\r\n## 升级Tomcat（可选）\r\n\r\n当前SC全家桶的tomcat版本高于脚手架的版本，可选择进行升级，方法如下：\r\n\r\n![](assets/2.png)\r\n\r\n1. 删除根目录下的tomcat相关的配置。\r\n\r\n+ 删除properties中的tomcat版本\r\n+ 删除dependencyManagement中的spring web设置\r\n\r\n```XML\r\n <properties>\r\n<!-- <tomcat.version>9.0.54</tomcat.version> -->\r\n </properties>\r\n <dependencyManagement>\r\n        <dependencies>\r\n            ...\r\n            <!-- Spring Web-->\r\n            <!--\r\n            <dependency>\r\n                <groupId>org.springframework.boot</groupId>\r\n                <artifactId>spring-boot-starter-web</artifactId>\r\n                <exclusions>\r\n                    <exclusion>\r\n                        <groupId>org.springframework.boot</groupId>\r\n                        <artifactId>spring-boot-starter-tomcat</artifactId>\r\n                    </exclusion>\r\n                    <exclusion>\r\n                        <groupId>org.apache.tomcat.embed</groupId>\r\n                        <artifactId>tomcat-embed-core</artifactId>\r\n                    </exclusion>\r\n                    <exclusion>\r\n                        <groupId>org.apache.tomcat</groupId>\r\n                        <artifactId>tomcat-annotations-api</artifactId>\r\n                    </exclusion>\r\n                    <exclusion>\r\n                        <groupId>org.apache.tomcat.embed</groupId>\r\n                        <artifactId>tomcat-embed-websocket</artifactId>\r\n                    </exclusion>\r\n\r\n                </exclusions>\r\n            </dependency>\r\n			-->\r\n            ...\r\n     </dependencies>\r\n</dependencyManagement>\r\n```\r\n\r\n2. ruoyi-auth模块删除tomcat相关依赖，检查是否存在spring-boot-starter-web，如果不存在则添加。\r\n\r\n```xml\r\n<!--\r\n<dependency>\r\n	<groupId>org.apache.tomcat.embed</groupId>\r\n	<artifactId>tomcat-embed-core</artifactId>\r\n</dependency>\r\n<dependency>\r\n	<groupId>org.apache.tomcat</groupId>\r\n	<artifactId>tomcat-annotations-api</artifactId>\r\n</dependency>\r\n<dependency>\r\n	<groupId>org.apache.tomcat.embed</groupId>\r\n	<artifactId>tomcat-embed-websocket</artifactId>\r\n</dependency>\r\n<dependency>\r\n	<groupId>org.apache.tomcat.embed</groupId>\r\n	<artifactId>tomcat-embed-el</artifactId>\r\n</dependency>\r\n-->\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n```\r\n\r\n3. ruoyi-file模块删除tomcat相关依赖，检查是否存在spring-boot-starter-web，如果不存在则添加。\r\n\r\n```xml\r\n<!-- SpringBoot Web -->\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n<!-- \r\n<dependency>\r\n	<groupId>org.apache.tomcat.embed</groupId>\r\n    <artifactId>tomcat-embed-core</artifactId>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.apache.tomcat</groupId>\r\n    <artifactId>tomcat-annotations-api</artifactId>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.apache.tomcat.embed</groupId>\r\n    <artifactId>tomcat-embed-websocket</artifactId>\r\n</dependency>\r\n-->\r\n```\r\n\r\n4. ruoyi-gen模块删除tomcat相关依赖，检查是否存在spring-boot-starter-web，如果不存在则添加。\r\n\r\n```xml\r\n<!-- SpringBoot Web -->\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n<!--\r\n<dependency>\r\n	<groupId>org.apache.tomcat.embed</groupId>\r\n	<artifactId>tomcat-embed-core</artifactId>\r\n</dependency>\r\n<dependency>\r\n	<groupId>org.apache.tomcat</groupId>\r\n	<artifactId>tomcat-annotations-api</artifactId>\r\n</dependency>\r\n<dependency>\r\n	<groupId>org.apache.tomcat.embed</groupId>\r\n	<artifactId>tomcat-embed-websocket</artifactId>\r\n</dependency>\r\n-->\r\n```\r\n\r\n5. ruoyi-job模块删除tomcat相关依赖，检查是否存在spring-boot-starter-web，如果不存在则添加。\r\n\r\n```xml\r\n<!-- SpringBoot Web -->\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n<!--\r\n<dependency>\r\n	<groupId>org.apache.tomcat.embed</groupId>\r\n	<artifactId>tomcat-embed-core</artifactId>\r\n</dependency>\r\n<dependency>\r\n	<groupId>org.apache.tomcat</groupId>\r\n	<artifactId>tomcat-annotations-api</artifactId>\r\n</dependency>\r\n<dependency>\r\n	<groupId>org.apache.tomcat.embed</groupId>\r\n	<artifactId>tomcat-embed-websocket</artifactId>\r\n</dependency>\r\n-->\r\n```\r\n\r\n6. ruoyi-system模块删除tomcat相关依赖，检查是否存在spring-boot-starter-web，如果不存在则添加。\r\n\r\n```xml\r\n<!-- SpringBoot Web -->\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n<!--\r\n<dependency>\r\n	<groupId>org.apache.tomcat.embed</groupId>\r\n	<artifactId>tomcat-embed-core</artifactId>\r\n</dependency>\r\n<dependency>\r\n	<groupId>org.apache.tomcat</groupId>\r\n	<artifactId>tomcat-annotations-api</artifactId>\r\n</dependency>\r\n<dependency>\r\n	<groupId>org.apache.tomcat.embed</groupId>\r\n	<artifactId>tomcat-embed-websocket</artifactId>\r\n</dependency>\r\n-->\r\n```\r\n\r\n## 验证\r\n\r\n1. 检查各个服务是否能正常启动\r\n2. 在项目根目录下执行`mvn dependency:tree > upgrade.log` 检查`spring-cloud-starter-gateway`的版本是否为3.1.1。\r\n',0,'',4,1,0,'0','0','2022-03-29 07:39:07',NULL,'2022-03-29'),(5,'测试文章','# ai-platform 升级文档\r\n\r\n## 升级SC全家桶版本\r\n\r\n升级项目根目录下的`Spring Boot`、`Spring Cloud`、`Spring Cloud Alibaba`的版本。\r\n\r\n![](assets/2.png)\r\n\r\n```xml\r\n<properties>\r\n    ...\r\n<spring-boot.version>2.6.3</spring-boot.version>\r\n<spring-cloud.version>2021.0.1</spring-cloud.version>\r\n<spring-cloud-alibaba.version>2021.0.1.0</spring-cloud-alibaba.version>\r\n    ...\r\n</properties>\r\n```\r\n\r\n升级Spring boot admin的版本：\r\n\r\n```XML\r\n<properties>\r\n    ...\r\n	<spring-boot-admin.version>2.6.2</spring-boot-admin.version>\r\n    ...\r\n</properties>\r\n```\r\n\r\n\r\n\r\n## 可读取Sping Cloud Alibaba 配置\r\n\r\n修改根目录下的`pom.xml`的依赖，能够读取到`bootstart.yml`文件。\r\n\r\n![](assets/3.png)\r\n\r\n```XML\r\n<dependencies>\r\n    <dependency>\r\n        <groupId>org.springframework.cloud</groupId>\r\n        <artifactId>spring-cloud-context</artifactId>\r\n    </dependency>\r\n    <dependency>\r\n        <groupId>org.springframework.cloud</groupId>\r\n        <artifactId>spring-cloud-starter-bootstrap</artifactId>\r\n    </dependency>\r\n</dependencies>\r\n```\r\n\r\n## 升级配置PageHelper\r\n\r\n![](assets/2.png)\r\n\r\n```xml\r\n<!--\r\n<pagehelper.boot.version>1.3.0</pagehelper.boot.version>\r\n-->\r\n<pagehelper.boot.version>1.4.1</pagehelper.boot.version>\r\n```\r\n\r\n## 删除`common-pool2`的依赖\r\n\r\n1. 删除根目录下`pom.xml`文件中`commons-pool2`的依赖\r\n\r\n![](assets/2.png)\r\n\r\n删除以下内容：\r\n\r\n+ common-pool.version\r\n+ dependencyManagement中的commons-pool2依赖\r\n\r\n```XML\r\n<properties>\r\n    <!-- 删除以下内容 -->\r\n    <!--\r\n    <common-pool.version>2.6.2</common-pool.version>\r\n	-->\r\n</properties>\r\n...\r\n<dependencyManagement>\r\n    <dependencies>		\r\n        <!-- 删除以下内容 -->\r\n        <!-- 公共资源池 -->\r\n        <!--\r\n		<dependency>\r\n            <groupId>org.apache.commons</groupId>\r\n            <artifactId>commons-pool2</artifactId>\r\n            <version>${common-pool.version}</version>\r\n        </dependency>\r\n		-->\r\n    </dependencies>\r\n...\r\n```\r\n\r\n2. 删除 `ruoyi-common-core `模块`pom.xml`中的`commons-pool2`\r\n\r\n![](assets/4.png)\r\n\r\n+ 删除commons-pool2的依赖\r\n\r\n```xml\r\n...\r\n<!-- 删除 -->\r\n<!-- Apache Commons Pool2 -->\r\n<!--\r\n<dependency>\r\n    <groupId>org.apache.commons</groupId>\r\n    <artifactId>commons-pool2</artifactId>\r\n</dependency>\r\n-->\r\n...\r\n```\r\n\r\n## 升级负载均衡器\r\n\r\n`ruoyi-common-core`模块的`pom.xml`文件中增加`spring-cloud-starter-loadbalancer`。\r\n\r\n```xml\r\n<!-- SpringCloud Loadbalancer -->\r\n<dependency>\r\n    <groupId>org.springframework.cloud</groupId>\r\n    <artifactId>spring-cloud-starter-loadbalancer</artifactId>\r\n</dependency>  \r\n```\r\n\r\n## 修复Seata循环依赖\r\n\r\n1. 在`ruoyi-common/ruoyi-common-datasource`模块下新增 `ApplicationSeataInitializer.java`。\r\n\r\n![](assets/1.png)\r\n\r\n内容为：\r\n\r\n```java\r\npackage com.ruoyi.common.datasource.env;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.env.EnvironmentPostProcessor;\r\nimport org.springframework.core.Ordered;\r\nimport org.springframework.core.env.ConfigurableEnvironment;\r\n\r\n/**\r\n * seata 在 springboot 2.6.x 存在循环引用问题的处理\r\n *\r\n * @author ruoyi\r\n */\r\npublic class ApplicationSeataInitializer implements EnvironmentPostProcessor, Ordered {\r\n    @Override\r\n    public void postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application) {\r\n        System.setProperty(\"spring.main.allow-circular-references\", \"true\");\r\n    }\r\n\r\n    @Override\r\n    public int getOrder() {\r\n        return Ordered.LOWEST_PRECEDENCE;\r\n    }\r\n}\r\n```\r\n\r\n2. 在`ruoyi-common/ruoyi-common-datasource`模块新增`src/main/resources/META-INF/spring.factories`文件。内容为：\r\n\r\n```properties\r\norg.springframework.boot.env.EnvironmentPostProcessor=\\\r\n    com.ruoyi.common.datasource.env.ApplicationSeataInitializer\r\n```\r\n\r\n## 停用 swagger\r\n\r\n1. `ruoyi-common-swagger`模块禁止`SwaggerAutoConfiguration` 自动装载。\r\n\r\n   注释掉`com.ruoyi.common.swagger.config.SwaggerAutoConfiguration`类中的`@Configuration`和`@EnableAutoConfiguration`。如下：\r\n\r\n```java\r\n//@Configuration\r\n@EnableSwagger2\r\n//@EnableAutoConfiguration\r\n@ConditionalOnProperty(name = \"swagger.enabled\", matchIfMissing = true)\r\npublic class SwaggerAutoConfiguration\r\n{\r\n    ...\r\n}\r\n```\r\n\r\n2. 修改`ruoyi-common/ruoyi-common-swagger/src/main/resources/META-INF/spring.factories`,如下：\r\n\r\n```properties\r\n#org.springframework.boot.autoconfigure.EnableAutoConfiguration=\\\r\n  com.ruoyi.common.swagger.config.SwaggerAutoConfiguration\r\n```\r\n\r\n**以下部分需要在每个模块中进行修改**\r\n\r\n需要修改的模块：\r\n\r\n1. ruoyi-system\r\n2. ruoyi-file\r\n3. ruoyi-gen\r\n4. ruoyi-job\r\n\r\n各个模块的`bootstrap.yml`设置enabled为false。\r\n\r\n```yaml\r\n# swagger配置\r\nswagger:\r\n  enabled: false\r\n```\r\n\r\n去掉模块的自动装配注解`@EnableCustomSwagger2`。\r\n\r\n```JAVA\r\n@EnableCustomConfig\r\n//@EnableCustomSwagger2\r\n@EnableRyFeignClients\r\n@SpringBootApplication\r\npublic class RuoYiSystemApplication {\r\n    ...\r\n}\r\n```\r\n\r\n## 替换@SpringCloudApplication\r\n\r\n需要替换的模块包括：\r\n\r\n1. ruoyi-auth \r\n   + 该模块不依赖于数据库，修改为`@SpringBootApplication(exclude = {DataSourceAutoConfiguration.class })`\r\n2. ruoyi-system\r\n3.  ruoyi-gen\r\n4.  ruoyi-job\r\n\r\n将模块的`@SpringCloudApplication`替换为`@SpringBootApplication`\r\n\r\n```java\r\n@EnableCustomConfig\r\n//@EnableCustomSwagger2\r\n@EnableRyFeignClients\r\n//@SpringCloudApplication\r\n@SpringBootApplication\r\npublic class RuoYiSystemApplication {\r\n    ...\r\n}\r\n```\r\n\r\n## 升级Tomcat（可选）\r\n\r\n当前SC全家桶的tomcat版本高于脚手架的版本，可选择进行升级，方法如下：\r\n\r\n![](assets/2.png)\r\n\r\n1. 删除根目录下的tomcat相关的配置。\r\n\r\n+ 删除properties中的tomcat版本\r\n+ 删除dependencyManagement中的spring web设置\r\n\r\n```XML\r\n <properties>\r\n<!-- <tomcat.version>9.0.54</tomcat.version> -->\r\n </properties>\r\n <dependencyManagement>\r\n        <dependencies>\r\n            ...\r\n            <!-- Spring Web-->\r\n            <!--\r\n            <dependency>\r\n                <groupId>org.springframework.boot</groupId>\r\n                <artifactId>spring-boot-starter-web</artifactId>\r\n                <exclusions>\r\n                    <exclusion>\r\n                        <groupId>org.springframework.boot</groupId>\r\n                        <artifactId>spring-boot-starter-tomcat</artifactId>\r\n                    </exclusion>\r\n                    <exclusion>\r\n                        <groupId>org.apache.tomcat.embed</groupId>\r\n                        <artifactId>tomcat-embed-core</artifactId>\r\n                    </exclusion>\r\n                    <exclusion>\r\n                        <groupId>org.apache.tomcat</groupId>\r\n                        <artifactId>tomcat-annotations-api</artifactId>\r\n                    </exclusion>\r\n                    <exclusion>\r\n                        <groupId>org.apache.tomcat.embed</groupId>\r\n                        <artifactId>tomcat-embed-websocket</artifactId>\r\n                    </exclusion>\r\n\r\n                </exclusions>\r\n            </dependency>\r\n			-->\r\n            ...\r\n     </dependencies>\r\n</dependencyManagement>\r\n```\r\n\r\n2. ruoyi-auth模块删除tomcat相关依赖，检查是否存在spring-boot-starter-web，如果不存在则添加。\r\n\r\n```xml\r\n<!--\r\n<dependency>\r\n	<groupId>org.apache.tomcat.embed</groupId>\r\n	<artifactId>tomcat-embed-core</artifactId>\r\n</dependency>\r\n<dependency>\r\n	<groupId>org.apache.tomcat</groupId>\r\n	<artifactId>tomcat-annotations-api</artifactId>\r\n</dependency>\r\n<dependency>\r\n	<groupId>org.apache.tomcat.embed</groupId>\r\n	<artifactId>tomcat-embed-websocket</artifactId>\r\n</dependency>\r\n<dependency>\r\n	<groupId>org.apache.tomcat.embed</groupId>\r\n	<artifactId>tomcat-embed-el</artifactId>\r\n</dependency>\r\n-->\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n```\r\n\r\n3. ruoyi-file模块删除tomcat相关依赖，检查是否存在spring-boot-starter-web，如果不存在则添加。\r\n\r\n```xml\r\n<!-- SpringBoot Web -->\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n<!-- \r\n<dependency>\r\n	<groupId>org.apache.tomcat.embed</groupId>\r\n    <artifactId>tomcat-embed-core</artifactId>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.apache.tomcat</groupId>\r\n    <artifactId>tomcat-annotations-api</artifactId>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.apache.tomcat.embed</groupId>\r\n    <artifactId>tomcat-embed-websocket</artifactId>\r\n</dependency>\r\n-->\r\n```\r\n\r\n4. ruoyi-gen模块删除tomcat相关依赖，检查是否存在spring-boot-starter-web，如果不存在则添加。\r\n\r\n```xml\r\n<!-- SpringBoot Web -->\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n<!--\r\n<dependency>\r\n	<groupId>org.apache.tomcat.embed</groupId>\r\n	<artifactId>tomcat-embed-core</artifactId>\r\n</dependency>\r\n<dependency>\r\n	<groupId>org.apache.tomcat</groupId>\r\n	<artifactId>tomcat-annotations-api</artifactId>\r\n</dependency>\r\n<dependency>\r\n	<groupId>org.apache.tomcat.embed</groupId>\r\n	<artifactId>tomcat-embed-websocket</artifactId>\r\n</dependency>\r\n-->\r\n```\r\n\r\n5. ruoyi-job模块删除tomcat相关依赖，检查是否存在spring-boot-starter-web，如果不存在则添加。\r\n\r\n```xml\r\n<!-- SpringBoot Web -->\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n<!--\r\n<dependency>\r\n	<groupId>org.apache.tomcat.embed</groupId>\r\n	<artifactId>tomcat-embed-core</artifactId>\r\n</dependency>\r\n<dependency>\r\n	<groupId>org.apache.tomcat</groupId>\r\n	<artifactId>tomcat-annotations-api</artifactId>\r\n</dependency>\r\n<dependency>\r\n	<groupId>org.apache.tomcat.embed</groupId>\r\n	<artifactId>tomcat-embed-websocket</artifactId>\r\n</dependency>\r\n-->\r\n```\r\n\r\n6. ruoyi-system模块删除tomcat相关依赖，检查是否存在spring-boot-starter-web，如果不存在则添加。\r\n\r\n```xml\r\n<!-- SpringBoot Web -->\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n<!--\r\n<dependency>\r\n	<groupId>org.apache.tomcat.embed</groupId>\r\n	<artifactId>tomcat-embed-core</artifactId>\r\n</dependency>\r\n<dependency>\r\n	<groupId>org.apache.tomcat</groupId>\r\n	<artifactId>tomcat-annotations-api</artifactId>\r\n</dependency>\r\n<dependency>\r\n	<groupId>org.apache.tomcat.embed</groupId>\r\n	<artifactId>tomcat-embed-websocket</artifactId>\r\n</dependency>\r\n-->\r\n```\r\n\r\n## 验证\r\n\r\n1. 检查各个服务是否能正常启动\r\n2. 在项目根目录下执行`mvn dependency:tree > upgrade.log` 检查`spring-cloud-starter-gateway`的版本是否为3.1.1。\r\n',0,'',4,1,0,'0','0','2022-03-29 07:39:19','2022-03-29 07:39:32','2022-03-29'),(6,'测试文章','# ai-platform 升级文档\r\n\r\n## 升级SC全家桶版本\r\n\r\n升级项目根目录下的`Spring Boot`、`Spring Cloud`、`Spring Cloud Alibaba`的版本。\r\n\r\n![](assets/2.png)\r\n\r\n```xml\r\n<properties>\r\n    ...\r\n<spring-boot.version>2.6.3</spring-boot.version>\r\n<spring-cloud.version>2021.0.1</spring-cloud.version>\r\n<spring-cloud-alibaba.version>2021.0.1.0</spring-cloud-alibaba.version>\r\n    ...\r\n</properties>\r\n```\r\n\r\n升级Spring boot admin的版本：\r\n\r\n```XML\r\n<properties>\r\n    ...\r\n	<spring-boot-admin.version>2.6.2</spring-boot-admin.version>\r\n    ...\r\n</properties>\r\n```\r\n\r\n\r\n\r\n## 可读取Sping Cloud Alibaba 配置\r\n\r\n修改根目录下的`pom.xml`的依赖，能够读取到`bootstart.yml`文件。\r\n\r\n![](assets/3.png)\r\n\r\n```XML\r\n<dependencies>\r\n    <dependency>\r\n        <groupId>org.springframework.cloud</groupId>\r\n        <artifactId>spring-cloud-context</artifactId>\r\n    </dependency>\r\n    <dependency>\r\n        <groupId>org.springframework.cloud</groupId>\r\n        <artifactId>spring-cloud-starter-bootstrap</artifactId>\r\n    </dependency>\r\n</dependencies>\r\n```\r\n\r\n## 升级配置PageHelper\r\n\r\n![](assets/2.png)\r\n\r\n```xml\r\n<!--\r\n<pagehelper.boot.version>1.3.0</pagehelper.boot.version>\r\n-->\r\n<pagehelper.boot.version>1.4.1</pagehelper.boot.version>\r\n```\r\n\r\n## 删除`common-pool2`的依赖\r\n\r\n1. 删除根目录下`pom.xml`文件中`commons-pool2`的依赖\r\n\r\n![](assets/2.png)\r\n\r\n删除以下内容：\r\n\r\n+ common-pool.version\r\n+ dependencyManagement中的commons-pool2依赖\r\n\r\n```XML\r\n<properties>\r\n    <!-- 删除以下内容 -->\r\n    <!--\r\n    <common-pool.version>2.6.2</common-pool.version>\r\n	-->\r\n</properties>\r\n...\r\n<dependencyManagement>\r\n    <dependencies>		\r\n        <!-- 删除以下内容 -->\r\n        <!-- 公共资源池 -->\r\n        <!--\r\n		<dependency>\r\n            <groupId>org.apache.commons</groupId>\r\n            <artifactId>commons-pool2</artifactId>\r\n            <version>${common-pool.version}</version>\r\n        </dependency>\r\n		-->\r\n    </dependencies>\r\n...\r\n```\r\n\r\n2. 删除 `ruoyi-common-core `模块`pom.xml`中的`commons-pool2`\r\n\r\n![](assets/4.png)\r\n\r\n+ 删除commons-pool2的依赖\r\n\r\n```xml\r\n...\r\n<!-- 删除 -->\r\n<!-- Apache Commons Pool2 -->\r\n<!--\r\n<dependency>\r\n    <groupId>org.apache.commons</groupId>\r\n    <artifactId>commons-pool2</artifactId>\r\n</dependency>\r\n-->\r\n...\r\n```\r\n\r\n## 升级负载均衡器\r\n\r\n`ruoyi-common-core`模块的`pom.xml`文件中增加`spring-cloud-starter-loadbalancer`。\r\n\r\n```xml\r\n<!-- SpringCloud Loadbalancer -->\r\n<dependency>\r\n    <groupId>org.springframework.cloud</groupId>\r\n    <artifactId>spring-cloud-starter-loadbalancer</artifactId>\r\n</dependency>  \r\n```\r\n\r\n## 修复Seata循环依赖\r\n\r\n1. 在`ruoyi-common/ruoyi-common-datasource`模块下新增 `ApplicationSeataInitializer.java`。\r\n\r\n![](assets/1.png)\r\n\r\n内容为：\r\n\r\n```java\r\npackage com.ruoyi.common.datasource.env;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.env.EnvironmentPostProcessor;\r\nimport org.springframework.core.Ordered;\r\nimport org.springframework.core.env.ConfigurableEnvironment;\r\n\r\n/**\r\n * seata 在 springboot 2.6.x 存在循环引用问题的处理\r\n *\r\n * @author ruoyi\r\n */\r\npublic class ApplicationSeataInitializer implements EnvironmentPostProcessor, Ordered {\r\n    @Override\r\n    public void postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application) {\r\n        System.setProperty(\"spring.main.allow-circular-references\", \"true\");\r\n    }\r\n\r\n    @Override\r\n    public int getOrder() {\r\n        return Ordered.LOWEST_PRECEDENCE;\r\n    }\r\n}\r\n```\r\n\r\n2. 在`ruoyi-common/ruoyi-common-datasource`模块新增`src/main/resources/META-INF/spring.factories`文件。内容为：\r\n\r\n```properties\r\norg.springframework.boot.env.EnvironmentPostProcessor=\\\r\n    com.ruoyi.common.datasource.env.ApplicationSeataInitializer\r\n```\r\n\r\n## 停用 swagger\r\n\r\n1. `ruoyi-common-swagger`模块禁止`SwaggerAutoConfiguration` 自动装载。\r\n\r\n   注释掉`com.ruoyi.common.swagger.config.SwaggerAutoConfiguration`类中的`@Configuration`和`@EnableAutoConfiguration`。如下：\r\n\r\n```java\r\n//@Configuration\r\n@EnableSwagger2\r\n//@EnableAutoConfiguration\r\n@ConditionalOnProperty(name = \"swagger.enabled\", matchIfMissing = true)\r\npublic class SwaggerAutoConfiguration\r\n{\r\n    ...\r\n}\r\n```\r\n\r\n2. 修改`ruoyi-common/ruoyi-common-swagger/src/main/resources/META-INF/spring.factories`,如下：\r\n\r\n```properties\r\n#org.springframework.boot.autoconfigure.EnableAutoConfiguration=\\\r\n  com.ruoyi.common.swagger.config.SwaggerAutoConfiguration\r\n```\r\n\r\n**以下部分需要在每个模块中进行修改**\r\n\r\n需要修改的模块：\r\n\r\n1. ruoyi-system\r\n2. ruoyi-file\r\n3. ruoyi-gen\r\n4. ruoyi-job\r\n\r\n各个模块的`bootstrap.yml`设置enabled为false。\r\n\r\n```yaml\r\n# swagger配置\r\nswagger:\r\n  enabled: false\r\n```\r\n\r\n去掉模块的自动装配注解`@EnableCustomSwagger2`。\r\n\r\n```JAVA\r\n@EnableCustomConfig\r\n//@EnableCustomSwagger2\r\n@EnableRyFeignClients\r\n@SpringBootApplication\r\npublic class RuoYiSystemApplication {\r\n    ...\r\n}\r\n```\r\n\r\n## 替换@SpringCloudApplication\r\n\r\n需要替换的模块包括：\r\n\r\n1. ruoyi-auth \r\n   + 该模块不依赖于数据库，修改为`@SpringBootApplication(exclude = {DataSourceAutoConfiguration.class })`\r\n2. ruoyi-system\r\n3.  ruoyi-gen\r\n4.  ruoyi-job\r\n\r\n将模块的`@SpringCloudApplication`替换为`@SpringBootApplication`\r\n\r\n```java\r\n@EnableCustomConfig\r\n//@EnableCustomSwagger2\r\n@EnableRyFeignClients\r\n//@SpringCloudApplication\r\n@SpringBootApplication\r\npublic class RuoYiSystemApplication {\r\n    ...\r\n}\r\n```\r\n\r\n## 升级Tomcat（可选）\r\n\r\n当前SC全家桶的tomcat版本高于脚手架的版本，可选择进行升级，方法如下：\r\n\r\n![](assets/2.png)\r\n\r\n1. 删除根目录下的tomcat相关的配置。\r\n\r\n+ 删除properties中的tomcat版本\r\n+ 删除dependencyManagement中的spring web设置\r\n\r\n```XML\r\n <properties>\r\n<!-- <tomcat.version>9.0.54</tomcat.version> -->\r\n </properties>\r\n <dependencyManagement>\r\n        <dependencies>\r\n            ...\r\n            <!-- Spring Web-->\r\n            <!--\r\n            <dependency>\r\n                <groupId>org.springframework.boot</groupId>\r\n                <artifactId>spring-boot-starter-web</artifactId>\r\n                <exclusions>\r\n                    <exclusion>\r\n                        <groupId>org.springframework.boot</groupId>\r\n                        <artifactId>spring-boot-starter-tomcat</artifactId>\r\n                    </exclusion>\r\n                    <exclusion>\r\n                        <groupId>org.apache.tomcat.embed</groupId>\r\n                        <artifactId>tomcat-embed-core</artifactId>\r\n                    </exclusion>\r\n                    <exclusion>\r\n                        <groupId>org.apache.tomcat</groupId>\r\n                        <artifactId>tomcat-annotations-api</artifactId>\r\n                    </exclusion>\r\n                    <exclusion>\r\n                        <groupId>org.apache.tomcat.embed</groupId>\r\n                        <artifactId>tomcat-embed-websocket</artifactId>\r\n                    </exclusion>\r\n\r\n                </exclusions>\r\n            </dependency>\r\n			-->\r\n            ...\r\n     </dependencies>\r\n</dependencyManagement>\r\n```\r\n\r\n2. ruoyi-auth模块删除tomcat相关依赖，检查是否存在spring-boot-starter-web，如果不存在则添加。\r\n\r\n```xml\r\n<!--\r\n<dependency>\r\n	<groupId>org.apache.tomcat.embed</groupId>\r\n	<artifactId>tomcat-embed-core</artifactId>\r\n</dependency>\r\n<dependency>\r\n	<groupId>org.apache.tomcat</groupId>\r\n	<artifactId>tomcat-annotations-api</artifactId>\r\n</dependency>\r\n<dependency>\r\n	<groupId>org.apache.tomcat.embed</groupId>\r\n	<artifactId>tomcat-embed-websocket</artifactId>\r\n</dependency>\r\n<dependency>\r\n	<groupId>org.apache.tomcat.embed</groupId>\r\n	<artifactId>tomcat-embed-el</artifactId>\r\n</dependency>\r\n-->\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n```\r\n\r\n3. ruoyi-file模块删除tomcat相关依赖，检查是否存在spring-boot-starter-web，如果不存在则添加。\r\n\r\n```xml\r\n<!-- SpringBoot Web -->\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n<!-- \r\n<dependency>\r\n	<groupId>org.apache.tomcat.embed</groupId>\r\n    <artifactId>tomcat-embed-core</artifactId>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.apache.tomcat</groupId>\r\n    <artifactId>tomcat-annotations-api</artifactId>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.apache.tomcat.embed</groupId>\r\n    <artifactId>tomcat-embed-websocket</artifactId>\r\n</dependency>\r\n-->\r\n```\r\n\r\n4. ruoyi-gen模块删除tomcat相关依赖，检查是否存在spring-boot-starter-web，如果不存在则添加。\r\n\r\n```xml\r\n<!-- SpringBoot Web -->\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n<!--\r\n<dependency>\r\n	<groupId>org.apache.tomcat.embed</groupId>\r\n	<artifactId>tomcat-embed-core</artifactId>\r\n</dependency>\r\n<dependency>\r\n	<groupId>org.apache.tomcat</groupId>\r\n	<artifactId>tomcat-annotations-api</artifactId>\r\n</dependency>\r\n<dependency>\r\n	<groupId>org.apache.tomcat.embed</groupId>\r\n	<artifactId>tomcat-embed-websocket</artifactId>\r\n</dependency>\r\n-->\r\n```\r\n\r\n5. ruoyi-job模块删除tomcat相关依赖，检查是否存在spring-boot-starter-web，如果不存在则添加。\r\n\r\n```xml\r\n<!-- SpringBoot Web -->\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n<!--\r\n<dependency>\r\n	<groupId>org.apache.tomcat.embed</groupId>\r\n	<artifactId>tomcat-embed-core</artifactId>\r\n</dependency>\r\n<dependency>\r\n	<groupId>org.apache.tomcat</groupId>\r\n	<artifactId>tomcat-annotations-api</artifactId>\r\n</dependency>\r\n<dependency>\r\n	<groupId>org.apache.tomcat.embed</groupId>\r\n	<artifactId>tomcat-embed-websocket</artifactId>\r\n</dependency>\r\n-->\r\n```\r\n\r\n6. ruoyi-system模块删除tomcat相关依赖，检查是否存在spring-boot-starter-web，如果不存在则添加。\r\n\r\n```xml\r\n<!-- SpringBoot Web -->\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n<!--\r\n<dependency>\r\n	<groupId>org.apache.tomcat.embed</groupId>\r\n	<artifactId>tomcat-embed-core</artifactId>\r\n</dependency>\r\n<dependency>\r\n	<groupId>org.apache.tomcat</groupId>\r\n	<artifactId>tomcat-annotations-api</artifactId>\r\n</dependency>\r\n<dependency>\r\n	<groupId>org.apache.tomcat.embed</groupId>\r\n	<artifactId>tomcat-embed-websocket</artifactId>\r\n</dependency>\r\n-->\r\n```\r\n\r\n## 验证\r\n\r\n1. 检查各个服务是否能正常启动\r\n2. 在项目根目录下执行`mvn dependency:tree > upgrade.log` 检查`spring-cloud-starter-gateway`的版本是否为3.1.1。\r\n',0,'',4,1,0,'0','0','2022-03-29 07:39:19','2022-03-29 07:39:32','2022-03-29'),(7,'测试文章','# ai-platform 升级文档\r\n\r\n## 升级SC全家桶版本\r\n\r\n升级项目根目录下的`Spring Boot`、`Spring Cloud`、`Spring Cloud Alibaba`的版本。\r\n\r\n![](assets/2.png)\r\n\r\n```xml\r\n<properties>\r\n    ...\r\n<spring-boot.version>2.6.3</spring-boot.version>\r\n<spring-cloud.version>2021.0.1</spring-cloud.version>\r\n<spring-cloud-alibaba.version>2021.0.1.0</spring-cloud-alibaba.version>\r\n    ...\r\n</properties>\r\n```\r\n\r\n升级Spring boot admin的版本：\r\n\r\n```XML\r\n<properties>\r\n    ...\r\n	<spring-boot-admin.version>2.6.2</spring-boot-admin.version>\r\n    ...\r\n</properties>\r\n```\r\n\r\n\r\n\r\n## 可读取Sping Cloud Alibaba 配置\r\n\r\n修改根目录下的`pom.xml`的依赖，能够读取到`bootstart.yml`文件。\r\n\r\n![](assets/3.png)\r\n\r\n```XML\r\n<dependencies>\r\n    <dependency>\r\n        <groupId>org.springframework.cloud</groupId>\r\n        <artifactId>spring-cloud-context</artifactId>\r\n    </dependency>\r\n    <dependency>\r\n        <groupId>org.springframework.cloud</groupId>\r\n        <artifactId>spring-cloud-starter-bootstrap</artifactId>\r\n    </dependency>\r\n</dependencies>\r\n```\r\n\r\n## 升级配置PageHelper\r\n\r\n![](assets/2.png)\r\n\r\n```xml\r\n<!--\r\n<pagehelper.boot.version>1.3.0</pagehelper.boot.version>\r\n-->\r\n<pagehelper.boot.version>1.4.1</pagehelper.boot.version>\r\n```\r\n\r\n## 删除`common-pool2`的依赖\r\n\r\n1. 删除根目录下`pom.xml`文件中`commons-pool2`的依赖\r\n\r\n![](assets/2.png)\r\n\r\n删除以下内容：\r\n\r\n+ common-pool.version\r\n+ dependencyManagement中的commons-pool2依赖\r\n\r\n```XML\r\n<properties>\r\n    <!-- 删除以下内容 -->\r\n    <!--\r\n    <common-pool.version>2.6.2</common-pool.version>\r\n	-->\r\n</properties>\r\n...\r\n<dependencyManagement>\r\n    <dependencies>		\r\n        <!-- 删除以下内容 -->\r\n        <!-- 公共资源池 -->\r\n        <!--\r\n		<dependency>\r\n            <groupId>org.apache.commons</groupId>\r\n            <artifactId>commons-pool2</artifactId>\r\n            <version>${common-pool.version}</version>\r\n        </dependency>\r\n		-->\r\n    </dependencies>\r\n...\r\n```\r\n\r\n2. 删除 `ruoyi-common-core `模块`pom.xml`中的`commons-pool2`\r\n\r\n![](assets/4.png)\r\n\r\n+ 删除commons-pool2的依赖\r\n\r\n```xml\r\n...\r\n<!-- 删除 -->\r\n<!-- Apache Commons Pool2 -->\r\n<!--\r\n<dependency>\r\n    <groupId>org.apache.commons</groupId>\r\n    <artifactId>commons-pool2</artifactId>\r\n</dependency>\r\n-->\r\n...\r\n```\r\n\r\n## 升级负载均衡器\r\n\r\n`ruoyi-common-core`模块的`pom.xml`文件中增加`spring-cloud-starter-loadbalancer`。\r\n\r\n```xml\r\n<!-- SpringCloud Loadbalancer -->\r\n<dependency>\r\n    <groupId>org.springframework.cloud</groupId>\r\n    <artifactId>spring-cloud-starter-loadbalancer</artifactId>\r\n</dependency>  \r\n```\r\n\r\n## 修复Seata循环依赖\r\n\r\n1. 在`ruoyi-common/ruoyi-common-datasource`模块下新增 `ApplicationSeataInitializer.java`。\r\n\r\n![](assets/1.png)\r\n\r\n内容为：\r\n\r\n```java\r\npackage com.ruoyi.common.datasource.env;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.env.EnvironmentPostProcessor;\r\nimport org.springframework.core.Ordered;\r\nimport org.springframework.core.env.ConfigurableEnvironment;\r\n\r\n/**\r\n * seata 在 springboot 2.6.x 存在循环引用问题的处理\r\n *\r\n * @author ruoyi\r\n */\r\npublic class ApplicationSeataInitializer implements EnvironmentPostProcessor, Ordered {\r\n    @Override\r\n    public void postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application) {\r\n        System.setProperty(\"spring.main.allow-circular-references\", \"true\");\r\n    }\r\n\r\n    @Override\r\n    public int getOrder() {\r\n        return Ordered.LOWEST_PRECEDENCE;\r\n    }\r\n}\r\n```\r\n\r\n2. 在`ruoyi-common/ruoyi-common-datasource`模块新增`src/main/resources/META-INF/spring.factories`文件。内容为：\r\n\r\n```properties\r\norg.springframework.boot.env.EnvironmentPostProcessor=\\\r\n    com.ruoyi.common.datasource.env.ApplicationSeataInitializer\r\n```\r\n\r\n## 停用 swagger\r\n\r\n1. `ruoyi-common-swagger`模块禁止`SwaggerAutoConfiguration` 自动装载。\r\n\r\n   注释掉`com.ruoyi.common.swagger.config.SwaggerAutoConfiguration`类中的`@Configuration`和`@EnableAutoConfiguration`。如下：\r\n\r\n```java\r\n//@Configuration\r\n@EnableSwagger2\r\n//@EnableAutoConfiguration\r\n@ConditionalOnProperty(name = \"swagger.enabled\", matchIfMissing = true)\r\npublic class SwaggerAutoConfiguration\r\n{\r\n    ...\r\n}\r\n```\r\n\r\n2. 修改`ruoyi-common/ruoyi-common-swagger/src/main/resources/META-INF/spring.factories`,如下：\r\n\r\n```properties\r\n#org.springframework.boot.autoconfigure.EnableAutoConfiguration=\\\r\n  com.ruoyi.common.swagger.config.SwaggerAutoConfiguration\r\n```\r\n\r\n**以下部分需要在每个模块中进行修改**\r\n\r\n需要修改的模块：\r\n\r\n1. ruoyi-system\r\n2. ruoyi-file\r\n3. ruoyi-gen\r\n4. ruoyi-job\r\n\r\n各个模块的`bootstrap.yml`设置enabled为false。\r\n\r\n```yaml\r\n# swagger配置\r\nswagger:\r\n  enabled: false\r\n```\r\n\r\n去掉模块的自动装配注解`@EnableCustomSwagger2`。\r\n\r\n```JAVA\r\n@EnableCustomConfig\r\n//@EnableCustomSwagger2\r\n@EnableRyFeignClients\r\n@SpringBootApplication\r\npublic class RuoYiSystemApplication {\r\n    ...\r\n}\r\n```\r\n\r\n## 替换@SpringCloudApplication\r\n\r\n需要替换的模块包括：\r\n\r\n1. ruoyi-auth \r\n   + 该模块不依赖于数据库，修改为`@SpringBootApplication(exclude = {DataSourceAutoConfiguration.class })`\r\n2. ruoyi-system\r\n3.  ruoyi-gen\r\n4.  ruoyi-job\r\n\r\n将模块的`@SpringCloudApplication`替换为`@SpringBootApplication`\r\n\r\n```java\r\n@EnableCustomConfig\r\n//@EnableCustomSwagger2\r\n@EnableRyFeignClients\r\n//@SpringCloudApplication\r\n@SpringBootApplication\r\npublic class RuoYiSystemApplication {\r\n    ...\r\n}\r\n```\r\n\r\n## 升级Tomcat（可选）\r\n\r\n当前SC全家桶的tomcat版本高于脚手架的版本，可选择进行升级，方法如下：\r\n\r\n![](assets/2.png)\r\n\r\n1. 删除根目录下的tomcat相关的配置。\r\n\r\n+ 删除properties中的tomcat版本\r\n+ 删除dependencyManagement中的spring web设置\r\n\r\n```XML\r\n <properties>\r\n<!-- <tomcat.version>9.0.54</tomcat.version> -->\r\n </properties>\r\n <dependencyManagement>\r\n        <dependencies>\r\n            ...\r\n            <!-- Spring Web-->\r\n            <!--\r\n            <dependency>\r\n                <groupId>org.springframework.boot</groupId>\r\n                <artifactId>spring-boot-starter-web</artifactId>\r\n                <exclusions>\r\n                    <exclusion>\r\n                        <groupId>org.springframework.boot</groupId>\r\n                        <artifactId>spring-boot-starter-tomcat</artifactId>\r\n                    </exclusion>\r\n                    <exclusion>\r\n                        <groupId>org.apache.tomcat.embed</groupId>\r\n                        <artifactId>tomcat-embed-core</artifactId>\r\n                    </exclusion>\r\n                    <exclusion>\r\n                        <groupId>org.apache.tomcat</groupId>\r\n                        <artifactId>tomcat-annotations-api</artifactId>\r\n                    </exclusion>\r\n                    <exclusion>\r\n                        <groupId>org.apache.tomcat.embed</groupId>\r\n                        <artifactId>tomcat-embed-websocket</artifactId>\r\n                    </exclusion>\r\n\r\n                </exclusions>\r\n            </dependency>\r\n			-->\r\n            ...\r\n     </dependencies>\r\n</dependencyManagement>\r\n```\r\n\r\n2. ruoyi-auth模块删除tomcat相关依赖，检查是否存在spring-boot-starter-web，如果不存在则添加。\r\n\r\n```xml\r\n<!--\r\n<dependency>\r\n	<groupId>org.apache.tomcat.embed</groupId>\r\n	<artifactId>tomcat-embed-core</artifactId>\r\n</dependency>\r\n<dependency>\r\n	<groupId>org.apache.tomcat</groupId>\r\n	<artifactId>tomcat-annotations-api</artifactId>\r\n</dependency>\r\n<dependency>\r\n	<groupId>org.apache.tomcat.embed</groupId>\r\n	<artifactId>tomcat-embed-websocket</artifactId>\r\n</dependency>\r\n<dependency>\r\n	<groupId>org.apache.tomcat.embed</groupId>\r\n	<artifactId>tomcat-embed-el</artifactId>\r\n</dependency>\r\n-->\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n```\r\n\r\n3. ruoyi-file模块删除tomcat相关依赖，检查是否存在spring-boot-starter-web，如果不存在则添加。\r\n\r\n```xml\r\n<!-- SpringBoot Web -->\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n<!-- \r\n<dependency>\r\n	<groupId>org.apache.tomcat.embed</groupId>\r\n    <artifactId>tomcat-embed-core</artifactId>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.apache.tomcat</groupId>\r\n    <artifactId>tomcat-annotations-api</artifactId>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.apache.tomcat.embed</groupId>\r\n    <artifactId>tomcat-embed-websocket</artifactId>\r\n</dependency>\r\n-->\r\n```\r\n\r\n4. ruoyi-gen模块删除tomcat相关依赖，检查是否存在spring-boot-starter-web，如果不存在则添加。\r\n\r\n```xml\r\n<!-- SpringBoot Web -->\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n<!--\r\n<dependency>\r\n	<groupId>org.apache.tomcat.embed</groupId>\r\n	<artifactId>tomcat-embed-core</artifactId>\r\n</dependency>\r\n<dependency>\r\n	<groupId>org.apache.tomcat</groupId>\r\n	<artifactId>tomcat-annotations-api</artifactId>\r\n</dependency>\r\n<dependency>\r\n	<groupId>org.apache.tomcat.embed</groupId>\r\n	<artifactId>tomcat-embed-websocket</artifactId>\r\n</dependency>\r\n-->\r\n```\r\n\r\n5. ruoyi-job模块删除tomcat相关依赖，检查是否存在spring-boot-starter-web，如果不存在则添加。\r\n\r\n```xml\r\n<!-- SpringBoot Web -->\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n<!--\r\n<dependency>\r\n	<groupId>org.apache.tomcat.embed</groupId>\r\n	<artifactId>tomcat-embed-core</artifactId>\r\n</dependency>\r\n<dependency>\r\n	<groupId>org.apache.tomcat</groupId>\r\n	<artifactId>tomcat-annotations-api</artifactId>\r\n</dependency>\r\n<dependency>\r\n	<groupId>org.apache.tomcat.embed</groupId>\r\n	<artifactId>tomcat-embed-websocket</artifactId>\r\n</dependency>\r\n-->\r\n```\r\n\r\n6. ruoyi-system模块删除tomcat相关依赖，检查是否存在spring-boot-starter-web，如果不存在则添加。\r\n\r\n```xml\r\n<!-- SpringBoot Web -->\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n<!--\r\n<dependency>\r\n	<groupId>org.apache.tomcat.embed</groupId>\r\n	<artifactId>tomcat-embed-core</artifactId>\r\n</dependency>\r\n<dependency>\r\n	<groupId>org.apache.tomcat</groupId>\r\n	<artifactId>tomcat-annotations-api</artifactId>\r\n</dependency>\r\n<dependency>\r\n	<groupId>org.apache.tomcat.embed</groupId>\r\n	<artifactId>tomcat-embed-websocket</artifactId>\r\n</dependency>\r\n-->\r\n```\r\n\r\n## 验证\r\n\r\n1. 检查各个服务是否能正常启动\r\n2. 在项目根目录下执行`mvn dependency:tree > upgrade.log` 检查`spring-cloud-starter-gateway`的版本是否为3.1.1。\r\n',0,'',4,1,0,'0','0','2022-03-29 07:39:07',NULL,'2022-03-29'),(8,'测试文章','# ai-platform 升级文档\r\n\r\n## 升级SC全家桶版本\r\n\r\n升级项目根目录下的`Spring Boot`、`Spring Cloud`、`Spring Cloud Alibaba`的版本。\r\n\r\n![](assets/2.png)\r\n\r\n```xml\r\n<properties>\r\n    ...\r\n<spring-boot.version>2.6.3</spring-boot.version>\r\n<spring-cloud.version>2021.0.1</spring-cloud.version>\r\n<spring-cloud-alibaba.version>2021.0.1.0</spring-cloud-alibaba.version>\r\n    ...\r\n</properties>\r\n```\r\n\r\n升级Spring boot admin的版本：\r\n\r\n```XML\r\n<properties>\r\n    ...\r\n	<spring-boot-admin.version>2.6.2</spring-boot-admin.version>\r\n    ...\r\n</properties>\r\n```\r\n\r\n\r\n\r\n## 可读取Sping Cloud Alibaba 配置\r\n\r\n修改根目录下的`pom.xml`的依赖，能够读取到`bootstart.yml`文件。\r\n\r\n![](assets/3.png)\r\n\r\n```XML\r\n<dependencies>\r\n    <dependency>\r\n        <groupId>org.springframework.cloud</groupId>\r\n        <artifactId>spring-cloud-context</artifactId>\r\n    </dependency>\r\n    <dependency>\r\n        <groupId>org.springframework.cloud</groupId>\r\n        <artifactId>spring-cloud-starter-bootstrap</artifactId>\r\n    </dependency>\r\n</dependencies>\r\n```\r\n\r\n## 升级配置PageHelper\r\n\r\n![](assets/2.png)\r\n\r\n```xml\r\n<!--\r\n<pagehelper.boot.version>1.3.0</pagehelper.boot.version>\r\n-->\r\n<pagehelper.boot.version>1.4.1</pagehelper.boot.version>\r\n```\r\n\r\n## 删除`common-pool2`的依赖\r\n\r\n1. 删除根目录下`pom.xml`文件中`commons-pool2`的依赖\r\n\r\n![](assets/2.png)\r\n\r\n删除以下内容：\r\n\r\n+ common-pool.version\r\n+ dependencyManagement中的commons-pool2依赖\r\n\r\n```XML\r\n<properties>\r\n    <!-- 删除以下内容 -->\r\n    <!--\r\n    <common-pool.version>2.6.2</common-pool.version>\r\n	-->\r\n</properties>\r\n...\r\n<dependencyManagement>\r\n    <dependencies>		\r\n        <!-- 删除以下内容 -->\r\n        <!-- 公共资源池 -->\r\n        <!--\r\n		<dependency>\r\n            <groupId>org.apache.commons</groupId>\r\n            <artifactId>commons-pool2</artifactId>\r\n            <version>${common-pool.version}</version>\r\n        </dependency>\r\n		-->\r\n    </dependencies>\r\n...\r\n```\r\n\r\n2. 删除 `ruoyi-common-core `模块`pom.xml`中的`commons-pool2`\r\n\r\n![](assets/4.png)\r\n\r\n+ 删除commons-pool2的依赖\r\n\r\n```xml\r\n...\r\n<!-- 删除 -->\r\n<!-- Apache Commons Pool2 -->\r\n<!--\r\n<dependency>\r\n    <groupId>org.apache.commons</groupId>\r\n    <artifactId>commons-pool2</artifactId>\r\n</dependency>\r\n-->\r\n...\r\n```\r\n\r\n## 升级负载均衡器\r\n\r\n`ruoyi-common-core`模块的`pom.xml`文件中增加`spring-cloud-starter-loadbalancer`。\r\n\r\n```xml\r\n<!-- SpringCloud Loadbalancer -->\r\n<dependency>\r\n    <groupId>org.springframework.cloud</groupId>\r\n    <artifactId>spring-cloud-starter-loadbalancer</artifactId>\r\n</dependency>  \r\n```\r\n\r\n## 修复Seata循环依赖\r\n\r\n1. 在`ruoyi-common/ruoyi-common-datasource`模块下新增 `ApplicationSeataInitializer.java`。\r\n\r\n![](assets/1.png)\r\n\r\n内容为：\r\n\r\n```java\r\npackage com.ruoyi.common.datasource.env;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.env.EnvironmentPostProcessor;\r\nimport org.springframework.core.Ordered;\r\nimport org.springframework.core.env.ConfigurableEnvironment;\r\n\r\n/**\r\n * seata 在 springboot 2.6.x 存在循环引用问题的处理\r\n *\r\n * @author ruoyi\r\n */\r\npublic class ApplicationSeataInitializer implements EnvironmentPostProcessor, Ordered {\r\n    @Override\r\n    public void postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application) {\r\n        System.setProperty(\"spring.main.allow-circular-references\", \"true\");\r\n    }\r\n\r\n    @Override\r\n    public int getOrder() {\r\n        return Ordered.LOWEST_PRECEDENCE;\r\n    }\r\n}\r\n```\r\n\r\n2. 在`ruoyi-common/ruoyi-common-datasource`模块新增`src/main/resources/META-INF/spring.factories`文件。内容为：\r\n\r\n```properties\r\norg.springframework.boot.env.EnvironmentPostProcessor=\\\r\n    com.ruoyi.common.datasource.env.ApplicationSeataInitializer\r\n```\r\n\r\n## 停用 swagger\r\n\r\n1. `ruoyi-common-swagger`模块禁止`SwaggerAutoConfiguration` 自动装载。\r\n\r\n   注释掉`com.ruoyi.common.swagger.config.SwaggerAutoConfiguration`类中的`@Configuration`和`@EnableAutoConfiguration`。如下：\r\n\r\n```java\r\n//@Configuration\r\n@EnableSwagger2\r\n//@EnableAutoConfiguration\r\n@ConditionalOnProperty(name = \"swagger.enabled\", matchIfMissing = true)\r\npublic class SwaggerAutoConfiguration\r\n{\r\n    ...\r\n}\r\n```\r\n\r\n2. 修改`ruoyi-common/ruoyi-common-swagger/src/main/resources/META-INF/spring.factories`,如下：\r\n\r\n```properties\r\n#org.springframework.boot.autoconfigure.EnableAutoConfiguration=\\\r\n  com.ruoyi.common.swagger.config.SwaggerAutoConfiguration\r\n```\r\n\r\n**以下部分需要在每个模块中进行修改**\r\n\r\n需要修改的模块：\r\n\r\n1. ruoyi-system\r\n2. ruoyi-file\r\n3. ruoyi-gen\r\n4. ruoyi-job\r\n\r\n各个模块的`bootstrap.yml`设置enabled为false。\r\n\r\n```yaml\r\n# swagger配置\r\nswagger:\r\n  enabled: false\r\n```\r\n\r\n去掉模块的自动装配注解`@EnableCustomSwagger2`。\r\n\r\n```JAVA\r\n@EnableCustomConfig\r\n//@EnableCustomSwagger2\r\n@EnableRyFeignClients\r\n@SpringBootApplication\r\npublic class RuoYiSystemApplication {\r\n    ...\r\n}\r\n```\r\n\r\n## 替换@SpringCloudApplication\r\n\r\n需要替换的模块包括：\r\n\r\n1. ruoyi-auth \r\n   + 该模块不依赖于数据库，修改为`@SpringBootApplication(exclude = {DataSourceAutoConfiguration.class })`\r\n2. ruoyi-system\r\n3.  ruoyi-gen\r\n4.  ruoyi-job\r\n\r\n将模块的`@SpringCloudApplication`替换为`@SpringBootApplication`\r\n\r\n```java\r\n@EnableCustomConfig\r\n//@EnableCustomSwagger2\r\n@EnableRyFeignClients\r\n//@SpringCloudApplication\r\n@SpringBootApplication\r\npublic class RuoYiSystemApplication {\r\n    ...\r\n}\r\n```\r\n\r\n## 升级Tomcat（可选）\r\n\r\n当前SC全家桶的tomcat版本高于脚手架的版本，可选择进行升级，方法如下：\r\n\r\n![](assets/2.png)\r\n\r\n1. 删除根目录下的tomcat相关的配置。\r\n\r\n+ 删除properties中的tomcat版本\r\n+ 删除dependencyManagement中的spring web设置\r\n\r\n```XML\r\n <properties>\r\n<!-- <tomcat.version>9.0.54</tomcat.version> -->\r\n </properties>\r\n <dependencyManagement>\r\n        <dependencies>\r\n            ...\r\n            <!-- Spring Web-->\r\n            <!--\r\n            <dependency>\r\n                <groupId>org.springframework.boot</groupId>\r\n                <artifactId>spring-boot-starter-web</artifactId>\r\n                <exclusions>\r\n                    <exclusion>\r\n                        <groupId>org.springframework.boot</groupId>\r\n                        <artifactId>spring-boot-starter-tomcat</artifactId>\r\n                    </exclusion>\r\n                    <exclusion>\r\n                        <groupId>org.apache.tomcat.embed</groupId>\r\n                        <artifactId>tomcat-embed-core</artifactId>\r\n                    </exclusion>\r\n                    <exclusion>\r\n                        <groupId>org.apache.tomcat</groupId>\r\n                        <artifactId>tomcat-annotations-api</artifactId>\r\n                    </exclusion>\r\n                    <exclusion>\r\n                        <groupId>org.apache.tomcat.embed</groupId>\r\n                        <artifactId>tomcat-embed-websocket</artifactId>\r\n                    </exclusion>\r\n\r\n                </exclusions>\r\n            </dependency>\r\n			-->\r\n            ...\r\n     </dependencies>\r\n</dependencyManagement>\r\n```\r\n\r\n2. ruoyi-auth模块删除tomcat相关依赖，检查是否存在spring-boot-starter-web，如果不存在则添加。\r\n\r\n```xml\r\n<!--\r\n<dependency>\r\n	<groupId>org.apache.tomcat.embed</groupId>\r\n	<artifactId>tomcat-embed-core</artifactId>\r\n</dependency>\r\n<dependency>\r\n	<groupId>org.apache.tomcat</groupId>\r\n	<artifactId>tomcat-annotations-api</artifactId>\r\n</dependency>\r\n<dependency>\r\n	<groupId>org.apache.tomcat.embed</groupId>\r\n	<artifactId>tomcat-embed-websocket</artifactId>\r\n</dependency>\r\n<dependency>\r\n	<groupId>org.apache.tomcat.embed</groupId>\r\n	<artifactId>tomcat-embed-el</artifactId>\r\n</dependency>\r\n-->\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n```\r\n\r\n3. ruoyi-file模块删除tomcat相关依赖，检查是否存在spring-boot-starter-web，如果不存在则添加。\r\n\r\n```xml\r\n<!-- SpringBoot Web -->\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n<!-- \r\n<dependency>\r\n	<groupId>org.apache.tomcat.embed</groupId>\r\n    <artifactId>tomcat-embed-core</artifactId>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.apache.tomcat</groupId>\r\n    <artifactId>tomcat-annotations-api</artifactId>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.apache.tomcat.embed</groupId>\r\n    <artifactId>tomcat-embed-websocket</artifactId>\r\n</dependency>\r\n-->\r\n```\r\n\r\n4. ruoyi-gen模块删除tomcat相关依赖，检查是否存在spring-boot-starter-web，如果不存在则添加。\r\n\r\n```xml\r\n<!-- SpringBoot Web -->\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n<!--\r\n<dependency>\r\n	<groupId>org.apache.tomcat.embed</groupId>\r\n	<artifactId>tomcat-embed-core</artifactId>\r\n</dependency>\r\n<dependency>\r\n	<groupId>org.apache.tomcat</groupId>\r\n	<artifactId>tomcat-annotations-api</artifactId>\r\n</dependency>\r\n<dependency>\r\n	<groupId>org.apache.tomcat.embed</groupId>\r\n	<artifactId>tomcat-embed-websocket</artifactId>\r\n</dependency>\r\n-->\r\n```\r\n\r\n5. ruoyi-job模块删除tomcat相关依赖，检查是否存在spring-boot-starter-web，如果不存在则添加。\r\n\r\n```xml\r\n<!-- SpringBoot Web -->\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n<!--\r\n<dependency>\r\n	<groupId>org.apache.tomcat.embed</groupId>\r\n	<artifactId>tomcat-embed-core</artifactId>\r\n</dependency>\r\n<dependency>\r\n	<groupId>org.apache.tomcat</groupId>\r\n	<artifactId>tomcat-annotations-api</artifactId>\r\n</dependency>\r\n<dependency>\r\n	<groupId>org.apache.tomcat.embed</groupId>\r\n	<artifactId>tomcat-embed-websocket</artifactId>\r\n</dependency>\r\n-->\r\n```\r\n\r\n6. ruoyi-system模块删除tomcat相关依赖，检查是否存在spring-boot-starter-web，如果不存在则添加。\r\n\r\n```xml\r\n<!-- SpringBoot Web -->\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n<!--\r\n<dependency>\r\n	<groupId>org.apache.tomcat.embed</groupId>\r\n	<artifactId>tomcat-embed-core</artifactId>\r\n</dependency>\r\n<dependency>\r\n	<groupId>org.apache.tomcat</groupId>\r\n	<artifactId>tomcat-annotations-api</artifactId>\r\n</dependency>\r\n<dependency>\r\n	<groupId>org.apache.tomcat.embed</groupId>\r\n	<artifactId>tomcat-embed-websocket</artifactId>\r\n</dependency>\r\n-->\r\n```\r\n\r\n## 验证\r\n\r\n1. 检查各个服务是否能正常启动\r\n2. 在项目根目录下执行`mvn dependency:tree > upgrade.log` 检查`spring-cloud-starter-gateway`的版本是否为3.1.1。\r\n',0,'',4,1,0,'0','0','2022-03-29 07:39:19','2022-03-29 07:39:32','2022-03-29'),(9,'测试文章','# ai-platform 升级文档\r\n\r\n## 升级SC全家桶版本\r\n\r\n升级项目根目录下的`Spring Boot`、`Spring Cloud`、`Spring Cloud Alibaba`的版本。\r\n\r\n![](assets/2.png)\r\n\r\n```xml\r\n<properties>\r\n    ...\r\n<spring-boot.version>2.6.3</spring-boot.version>\r\n<spring-cloud.version>2021.0.1</spring-cloud.version>\r\n<spring-cloud-alibaba.version>2021.0.1.0</spring-cloud-alibaba.version>\r\n    ...\r\n</properties>\r\n```\r\n\r\n升级Spring boot admin的版本：\r\n\r\n```XML\r\n<properties>\r\n    ...\r\n	<spring-boot-admin.version>2.6.2</spring-boot-admin.version>\r\n    ...\r\n</properties>\r\n```\r\n\r\n\r\n\r\n## 可读取Sping Cloud Alibaba 配置\r\n\r\n修改根目录下的`pom.xml`的依赖，能够读取到`bootstart.yml`文件。\r\n\r\n![](assets/3.png)\r\n\r\n```XML\r\n<dependencies>\r\n    <dependency>\r\n        <groupId>org.springframework.cloud</groupId>\r\n        <artifactId>spring-cloud-context</artifactId>\r\n    </dependency>\r\n    <dependency>\r\n        <groupId>org.springframework.cloud</groupId>\r\n        <artifactId>spring-cloud-starter-bootstrap</artifactId>\r\n    </dependency>\r\n</dependencies>\r\n```\r\n\r\n## 升级配置PageHelper\r\n\r\n![](assets/2.png)\r\n\r\n```xml\r\n<!--\r\n<pagehelper.boot.version>1.3.0</pagehelper.boot.version>\r\n-->\r\n<pagehelper.boot.version>1.4.1</pagehelper.boot.version>\r\n```\r\n\r\n## 删除`common-pool2`的依赖\r\n\r\n1. 删除根目录下`pom.xml`文件中`commons-pool2`的依赖\r\n\r\n![](assets/2.png)\r\n\r\n删除以下内容：\r\n\r\n+ common-pool.version\r\n+ dependencyManagement中的commons-pool2依赖\r\n\r\n```XML\r\n<properties>\r\n    <!-- 删除以下内容 -->\r\n    <!--\r\n    <common-pool.version>2.6.2</common-pool.version>\r\n	-->\r\n</properties>\r\n...\r\n<dependencyManagement>\r\n    <dependencies>		\r\n        <!-- 删除以下内容 -->\r\n        <!-- 公共资源池 -->\r\n        <!--\r\n		<dependency>\r\n            <groupId>org.apache.commons</groupId>\r\n            <artifactId>commons-pool2</artifactId>\r\n            <version>${common-pool.version}</version>\r\n        </dependency>\r\n		-->\r\n    </dependencies>\r\n...\r\n```\r\n\r\n2. 删除 `ruoyi-common-core `模块`pom.xml`中的`commons-pool2`\r\n\r\n![](assets/4.png)\r\n\r\n+ 删除commons-pool2的依赖\r\n\r\n```xml\r\n...\r\n<!-- 删除 -->\r\n<!-- Apache Commons Pool2 -->\r\n<!--\r\n<dependency>\r\n    <groupId>org.apache.commons</groupId>\r\n    <artifactId>commons-pool2</artifactId>\r\n</dependency>\r\n-->\r\n...\r\n```\r\n\r\n## 升级负载均衡器\r\n\r\n`ruoyi-common-core`模块的`pom.xml`文件中增加`spring-cloud-starter-loadbalancer`。\r\n\r\n```xml\r\n<!-- SpringCloud Loadbalancer -->\r\n<dependency>\r\n    <groupId>org.springframework.cloud</groupId>\r\n    <artifactId>spring-cloud-starter-loadbalancer</artifactId>\r\n</dependency>  \r\n```\r\n\r\n## 修复Seata循环依赖\r\n\r\n1. 在`ruoyi-common/ruoyi-common-datasource`模块下新增 `ApplicationSeataInitializer.java`。\r\n\r\n![](assets/1.png)\r\n\r\n内容为：\r\n\r\n```java\r\npackage com.ruoyi.common.datasource.env;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.env.EnvironmentPostProcessor;\r\nimport org.springframework.core.Ordered;\r\nimport org.springframework.core.env.ConfigurableEnvironment;\r\n\r\n/**\r\n * seata 在 springboot 2.6.x 存在循环引用问题的处理\r\n *\r\n * @author ruoyi\r\n */\r\npublic class ApplicationSeataInitializer implements EnvironmentPostProcessor, Ordered {\r\n    @Override\r\n    public void postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application) {\r\n        System.setProperty(\"spring.main.allow-circular-references\", \"true\");\r\n    }\r\n\r\n    @Override\r\n    public int getOrder() {\r\n        return Ordered.LOWEST_PRECEDENCE;\r\n    }\r\n}\r\n```\r\n\r\n2. 在`ruoyi-common/ruoyi-common-datasource`模块新增`src/main/resources/META-INF/spring.factories`文件。内容为：\r\n\r\n```properties\r\norg.springframework.boot.env.EnvironmentPostProcessor=\\\r\n    com.ruoyi.common.datasource.env.ApplicationSeataInitializer\r\n```\r\n\r\n## 停用 swagger\r\n\r\n1. `ruoyi-common-swagger`模块禁止`SwaggerAutoConfiguration` 自动装载。\r\n\r\n   注释掉`com.ruoyi.common.swagger.config.SwaggerAutoConfiguration`类中的`@Configuration`和`@EnableAutoConfiguration`。如下：\r\n\r\n```java\r\n//@Configuration\r\n@EnableSwagger2\r\n//@EnableAutoConfiguration\r\n@ConditionalOnProperty(name = \"swagger.enabled\", matchIfMissing = true)\r\npublic class SwaggerAutoConfiguration\r\n{\r\n    ...\r\n}\r\n```\r\n\r\n2. 修改`ruoyi-common/ruoyi-common-swagger/src/main/resources/META-INF/spring.factories`,如下：\r\n\r\n```properties\r\n#org.springframework.boot.autoconfigure.EnableAutoConfiguration=\\\r\n  com.ruoyi.common.swagger.config.SwaggerAutoConfiguration\r\n```\r\n\r\n**以下部分需要在每个模块中进行修改**\r\n\r\n需要修改的模块：\r\n\r\n1. ruoyi-system\r\n2. ruoyi-file\r\n3. ruoyi-gen\r\n4. ruoyi-job\r\n\r\n各个模块的`bootstrap.yml`设置enabled为false。\r\n\r\n```yaml\r\n# swagger配置\r\nswagger:\r\n  enabled: false\r\n```\r\n\r\n去掉模块的自动装配注解`@EnableCustomSwagger2`。\r\n\r\n```JAVA\r\n@EnableCustomConfig\r\n//@EnableCustomSwagger2\r\n@EnableRyFeignClients\r\n@SpringBootApplication\r\npublic class RuoYiSystemApplication {\r\n    ...\r\n}\r\n```\r\n\r\n## 替换@SpringCloudApplication\r\n\r\n需要替换的模块包括：\r\n\r\n1. ruoyi-auth \r\n   + 该模块不依赖于数据库，修改为`@SpringBootApplication(exclude = {DataSourceAutoConfiguration.class })`\r\n2. ruoyi-system\r\n3.  ruoyi-gen\r\n4.  ruoyi-job\r\n\r\n将模块的`@SpringCloudApplication`替换为`@SpringBootApplication`\r\n\r\n```java\r\n@EnableCustomConfig\r\n//@EnableCustomSwagger2\r\n@EnableRyFeignClients\r\n//@SpringCloudApplication\r\n@SpringBootApplication\r\npublic class RuoYiSystemApplication {\r\n    ...\r\n}\r\n```\r\n\r\n## 升级Tomcat（可选）\r\n\r\n当前SC全家桶的tomcat版本高于脚手架的版本，可选择进行升级，方法如下：\r\n\r\n![](assets/2.png)\r\n\r\n1. 删除根目录下的tomcat相关的配置。\r\n\r\n+ 删除properties中的tomcat版本\r\n+ 删除dependencyManagement中的spring web设置\r\n\r\n```XML\r\n <properties>\r\n<!-- <tomcat.version>9.0.54</tomcat.version> -->\r\n </properties>\r\n <dependencyManagement>\r\n        <dependencies>\r\n            ...\r\n            <!-- Spring Web-->\r\n            <!--\r\n            <dependency>\r\n                <groupId>org.springframework.boot</groupId>\r\n                <artifactId>spring-boot-starter-web</artifactId>\r\n                <exclusions>\r\n                    <exclusion>\r\n                        <groupId>org.springframework.boot</groupId>\r\n                        <artifactId>spring-boot-starter-tomcat</artifactId>\r\n                    </exclusion>\r\n                    <exclusion>\r\n                        <groupId>org.apache.tomcat.embed</groupId>\r\n                        <artifactId>tomcat-embed-core</artifactId>\r\n                    </exclusion>\r\n                    <exclusion>\r\n                        <groupId>org.apache.tomcat</groupId>\r\n                        <artifactId>tomcat-annotations-api</artifactId>\r\n                    </exclusion>\r\n                    <exclusion>\r\n                        <groupId>org.apache.tomcat.embed</groupId>\r\n                        <artifactId>tomcat-embed-websocket</artifactId>\r\n                    </exclusion>\r\n\r\n                </exclusions>\r\n            </dependency>\r\n			-->\r\n            ...\r\n     </dependencies>\r\n</dependencyManagement>\r\n```\r\n\r\n2. ruoyi-auth模块删除tomcat相关依赖，检查是否存在spring-boot-starter-web，如果不存在则添加。\r\n\r\n```xml\r\n<!--\r\n<dependency>\r\n	<groupId>org.apache.tomcat.embed</groupId>\r\n	<artifactId>tomcat-embed-core</artifactId>\r\n</dependency>\r\n<dependency>\r\n	<groupId>org.apache.tomcat</groupId>\r\n	<artifactId>tomcat-annotations-api</artifactId>\r\n</dependency>\r\n<dependency>\r\n	<groupId>org.apache.tomcat.embed</groupId>\r\n	<artifactId>tomcat-embed-websocket</artifactId>\r\n</dependency>\r\n<dependency>\r\n	<groupId>org.apache.tomcat.embed</groupId>\r\n	<artifactId>tomcat-embed-el</artifactId>\r\n</dependency>\r\n-->\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n```\r\n\r\n3. ruoyi-file模块删除tomcat相关依赖，检查是否存在spring-boot-starter-web，如果不存在则添加。\r\n\r\n```xml\r\n<!-- SpringBoot Web -->\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n<!-- \r\n<dependency>\r\n	<groupId>org.apache.tomcat.embed</groupId>\r\n    <artifactId>tomcat-embed-core</artifactId>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.apache.tomcat</groupId>\r\n    <artifactId>tomcat-annotations-api</artifactId>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.apache.tomcat.embed</groupId>\r\n    <artifactId>tomcat-embed-websocket</artifactId>\r\n</dependency>\r\n-->\r\n```\r\n\r\n4. ruoyi-gen模块删除tomcat相关依赖，检查是否存在spring-boot-starter-web，如果不存在则添加。\r\n\r\n```xml\r\n<!-- SpringBoot Web -->\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n<!--\r\n<dependency>\r\n	<groupId>org.apache.tomcat.embed</groupId>\r\n	<artifactId>tomcat-embed-core</artifactId>\r\n</dependency>\r\n<dependency>\r\n	<groupId>org.apache.tomcat</groupId>\r\n	<artifactId>tomcat-annotations-api</artifactId>\r\n</dependency>\r\n<dependency>\r\n	<groupId>org.apache.tomcat.embed</groupId>\r\n	<artifactId>tomcat-embed-websocket</artifactId>\r\n</dependency>\r\n-->\r\n```\r\n\r\n5. ruoyi-job模块删除tomcat相关依赖，检查是否存在spring-boot-starter-web，如果不存在则添加。\r\n\r\n```xml\r\n<!-- SpringBoot Web -->\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n<!--\r\n<dependency>\r\n	<groupId>org.apache.tomcat.embed</groupId>\r\n	<artifactId>tomcat-embed-core</artifactId>\r\n</dependency>\r\n<dependency>\r\n	<groupId>org.apache.tomcat</groupId>\r\n	<artifactId>tomcat-annotations-api</artifactId>\r\n</dependency>\r\n<dependency>\r\n	<groupId>org.apache.tomcat.embed</groupId>\r\n	<artifactId>tomcat-embed-websocket</artifactId>\r\n</dependency>\r\n-->\r\n```\r\n\r\n6. ruoyi-system模块删除tomcat相关依赖，检查是否存在spring-boot-starter-web，如果不存在则添加。\r\n\r\n```xml\r\n<!-- SpringBoot Web -->\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n<!--\r\n<dependency>\r\n	<groupId>org.apache.tomcat.embed</groupId>\r\n	<artifactId>tomcat-embed-core</artifactId>\r\n</dependency>\r\n<dependency>\r\n	<groupId>org.apache.tomcat</groupId>\r\n	<artifactId>tomcat-annotations-api</artifactId>\r\n</dependency>\r\n<dependency>\r\n	<groupId>org.apache.tomcat.embed</groupId>\r\n	<artifactId>tomcat-embed-websocket</artifactId>\r\n</dependency>\r\n-->\r\n```\r\n\r\n## 验证\r\n\r\n1. 检查各个服务是否能正常启动\r\n2. 在项目根目录下执行`mvn dependency:tree > upgrade.log` 检查`spring-cloud-starter-gateway`的版本是否为3.1.1。\r\n',0,'',5,1,0,'0','0','2022-03-29 07:39:07',NULL,'2022-03-29'),(10,'测试文章','# ai-platform 升级文档\r\n\r\n## 升级SC全家桶版本\r\n\r\n升级项目根目录下的`Spring Boot`、`Spring Cloud`、`Spring Cloud Alibaba`的版本。\r\n\r\n![](assets/2.png)\r\n\r\n```xml\r\n<properties>\r\n    ...\r\n<spring-boot.version>2.6.3</spring-boot.version>\r\n<spring-cloud.version>2021.0.1</spring-cloud.version>\r\n<spring-cloud-alibaba.version>2021.0.1.0</spring-cloud-alibaba.version>\r\n    ...\r\n</properties>\r\n```\r\n\r\n升级Spring boot admin的版本：\r\n\r\n```XML\r\n<properties>\r\n    ...\r\n	<spring-boot-admin.version>2.6.2</spring-boot-admin.version>\r\n    ...\r\n</properties>\r\n```\r\n\r\n\r\n\r\n## 可读取Sping Cloud Alibaba 配置\r\n\r\n修改根目录下的`pom.xml`的依赖，能够读取到`bootstart.yml`文件。\r\n\r\n![](assets/3.png)\r\n\r\n```XML\r\n<dependencies>\r\n    <dependency>\r\n        <groupId>org.springframework.cloud</groupId>\r\n        <artifactId>spring-cloud-context</artifactId>\r\n    </dependency>\r\n    <dependency>\r\n        <groupId>org.springframework.cloud</groupId>\r\n        <artifactId>spring-cloud-starter-bootstrap</artifactId>\r\n    </dependency>\r\n</dependencies>\r\n```\r\n\r\n## 升级配置PageHelper\r\n\r\n![](assets/2.png)\r\n\r\n```xml\r\n<!--\r\n<pagehelper.boot.version>1.3.0</pagehelper.boot.version>\r\n-->\r\n<pagehelper.boot.version>1.4.1</pagehelper.boot.version>\r\n```\r\n\r\n## 删除`common-pool2`的依赖\r\n\r\n1. 删除根目录下`pom.xml`文件中`commons-pool2`的依赖\r\n\r\n![](assets/2.png)\r\n\r\n删除以下内容：\r\n\r\n+ common-pool.version\r\n+ dependencyManagement中的commons-pool2依赖\r\n\r\n```XML\r\n<properties>\r\n    <!-- 删除以下内容 -->\r\n    <!--\r\n    <common-pool.version>2.6.2</common-pool.version>\r\n	-->\r\n</properties>\r\n...\r\n<dependencyManagement>\r\n    <dependencies>		\r\n        <!-- 删除以下内容 -->\r\n        <!-- 公共资源池 -->\r\n        <!--\r\n		<dependency>\r\n            <groupId>org.apache.commons</groupId>\r\n            <artifactId>commons-pool2</artifactId>\r\n            <version>${common-pool.version}</version>\r\n        </dependency>\r\n		-->\r\n    </dependencies>\r\n...\r\n```\r\n\r\n2. 删除 `ruoyi-common-core `模块`pom.xml`中的`commons-pool2`\r\n\r\n![](assets/4.png)\r\n\r\n+ 删除commons-pool2的依赖\r\n\r\n```xml\r\n...\r\n<!-- 删除 -->\r\n<!-- Apache Commons Pool2 -->\r\n<!--\r\n<dependency>\r\n    <groupId>org.apache.commons</groupId>\r\n    <artifactId>commons-pool2</artifactId>\r\n</dependency>\r\n-->\r\n...\r\n```\r\n\r\n## 升级负载均衡器\r\n\r\n`ruoyi-common-core`模块的`pom.xml`文件中增加`spring-cloud-starter-loadbalancer`。\r\n\r\n```xml\r\n<!-- SpringCloud Loadbalancer -->\r\n<dependency>\r\n    <groupId>org.springframework.cloud</groupId>\r\n    <artifactId>spring-cloud-starter-loadbalancer</artifactId>\r\n</dependency>  \r\n```\r\n\r\n## 修复Seata循环依赖\r\n\r\n1. 在`ruoyi-common/ruoyi-common-datasource`模块下新增 `ApplicationSeataInitializer.java`。\r\n\r\n![](assets/1.png)\r\n\r\n内容为：\r\n\r\n```java\r\npackage com.ruoyi.common.datasource.env;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.env.EnvironmentPostProcessor;\r\nimport org.springframework.core.Ordered;\r\nimport org.springframework.core.env.ConfigurableEnvironment;\r\n\r\n/**\r\n * seata 在 springboot 2.6.x 存在循环引用问题的处理\r\n *\r\n * @author ruoyi\r\n */\r\npublic class ApplicationSeataInitializer implements EnvironmentPostProcessor, Ordered {\r\n    @Override\r\n    public void postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application) {\r\n        System.setProperty(\"spring.main.allow-circular-references\", \"true\");\r\n    }\r\n\r\n    @Override\r\n    public int getOrder() {\r\n        return Ordered.LOWEST_PRECEDENCE;\r\n    }\r\n}\r\n```\r\n\r\n2. 在`ruoyi-common/ruoyi-common-datasource`模块新增`src/main/resources/META-INF/spring.factories`文件。内容为：\r\n\r\n```properties\r\norg.springframework.boot.env.EnvironmentPostProcessor=\\\r\n    com.ruoyi.common.datasource.env.ApplicationSeataInitializer\r\n```\r\n\r\n## 停用 swagger\r\n\r\n1. `ruoyi-common-swagger`模块禁止`SwaggerAutoConfiguration` 自动装载。\r\n\r\n   注释掉`com.ruoyi.common.swagger.config.SwaggerAutoConfiguration`类中的`@Configuration`和`@EnableAutoConfiguration`。如下：\r\n\r\n```java\r\n//@Configuration\r\n@EnableSwagger2\r\n//@EnableAutoConfiguration\r\n@ConditionalOnProperty(name = \"swagger.enabled\", matchIfMissing = true)\r\npublic class SwaggerAutoConfiguration\r\n{\r\n    ...\r\n}\r\n```\r\n\r\n2. 修改`ruoyi-common/ruoyi-common-swagger/src/main/resources/META-INF/spring.factories`,如下：\r\n\r\n```properties\r\n#org.springframework.boot.autoconfigure.EnableAutoConfiguration=\\\r\n  com.ruoyi.common.swagger.config.SwaggerAutoConfiguration\r\n```\r\n\r\n**以下部分需要在每个模块中进行修改**\r\n\r\n需要修改的模块：\r\n\r\n1. ruoyi-system\r\n2. ruoyi-file\r\n3. ruoyi-gen\r\n4. ruoyi-job\r\n\r\n各个模块的`bootstrap.yml`设置enabled为false。\r\n\r\n```yaml\r\n# swagger配置\r\nswagger:\r\n  enabled: false\r\n```\r\n\r\n去掉模块的自动装配注解`@EnableCustomSwagger2`。\r\n\r\n```JAVA\r\n@EnableCustomConfig\r\n//@EnableCustomSwagger2\r\n@EnableRyFeignClients\r\n@SpringBootApplication\r\npublic class RuoYiSystemApplication {\r\n    ...\r\n}\r\n```\r\n\r\n## 替换@SpringCloudApplication\r\n\r\n需要替换的模块包括：\r\n\r\n1. ruoyi-auth \r\n   + 该模块不依赖于数据库，修改为`@SpringBootApplication(exclude = {DataSourceAutoConfiguration.class })`\r\n2. ruoyi-system\r\n3.  ruoyi-gen\r\n4.  ruoyi-job\r\n\r\n将模块的`@SpringCloudApplication`替换为`@SpringBootApplication`\r\n\r\n```java\r\n@EnableCustomConfig\r\n//@EnableCustomSwagger2\r\n@EnableRyFeignClients\r\n//@SpringCloudApplication\r\n@SpringBootApplication\r\npublic class RuoYiSystemApplication {\r\n    ...\r\n}\r\n```\r\n\r\n## 升级Tomcat（可选）\r\n\r\n当前SC全家桶的tomcat版本高于脚手架的版本，可选择进行升级，方法如下：\r\n\r\n![](assets/2.png)\r\n\r\n1. 删除根目录下的tomcat相关的配置。\r\n\r\n+ 删除properties中的tomcat版本\r\n+ 删除dependencyManagement中的spring web设置\r\n\r\n```XML\r\n <properties>\r\n<!-- <tomcat.version>9.0.54</tomcat.version> -->\r\n </properties>\r\n <dependencyManagement>\r\n        <dependencies>\r\n            ...\r\n            <!-- Spring Web-->\r\n            <!--\r\n            <dependency>\r\n                <groupId>org.springframework.boot</groupId>\r\n                <artifactId>spring-boot-starter-web</artifactId>\r\n                <exclusions>\r\n                    <exclusion>\r\n                        <groupId>org.springframework.boot</groupId>\r\n                        <artifactId>spring-boot-starter-tomcat</artifactId>\r\n                    </exclusion>\r\n                    <exclusion>\r\n                        <groupId>org.apache.tomcat.embed</groupId>\r\n                        <artifactId>tomcat-embed-core</artifactId>\r\n                    </exclusion>\r\n                    <exclusion>\r\n                        <groupId>org.apache.tomcat</groupId>\r\n                        <artifactId>tomcat-annotations-api</artifactId>\r\n                    </exclusion>\r\n                    <exclusion>\r\n                        <groupId>org.apache.tomcat.embed</groupId>\r\n                        <artifactId>tomcat-embed-websocket</artifactId>\r\n                    </exclusion>\r\n\r\n                </exclusions>\r\n            </dependency>\r\n			-->\r\n            ...\r\n     </dependencies>\r\n</dependencyManagement>\r\n```\r\n\r\n2. ruoyi-auth模块删除tomcat相关依赖，检查是否存在spring-boot-starter-web，如果不存在则添加。\r\n\r\n```xml\r\n<!--\r\n<dependency>\r\n	<groupId>org.apache.tomcat.embed</groupId>\r\n	<artifactId>tomcat-embed-core</artifactId>\r\n</dependency>\r\n<dependency>\r\n	<groupId>org.apache.tomcat</groupId>\r\n	<artifactId>tomcat-annotations-api</artifactId>\r\n</dependency>\r\n<dependency>\r\n	<groupId>org.apache.tomcat.embed</groupId>\r\n	<artifactId>tomcat-embed-websocket</artifactId>\r\n</dependency>\r\n<dependency>\r\n	<groupId>org.apache.tomcat.embed</groupId>\r\n	<artifactId>tomcat-embed-el</artifactId>\r\n</dependency>\r\n-->\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n```\r\n\r\n3. ruoyi-file模块删除tomcat相关依赖，检查是否存在spring-boot-starter-web，如果不存在则添加。\r\n\r\n```xml\r\n<!-- SpringBoot Web -->\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n<!-- \r\n<dependency>\r\n	<groupId>org.apache.tomcat.embed</groupId>\r\n    <artifactId>tomcat-embed-core</artifactId>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.apache.tomcat</groupId>\r\n    <artifactId>tomcat-annotations-api</artifactId>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.apache.tomcat.embed</groupId>\r\n    <artifactId>tomcat-embed-websocket</artifactId>\r\n</dependency>\r\n-->\r\n```\r\n\r\n4. ruoyi-gen模块删除tomcat相关依赖，检查是否存在spring-boot-starter-web，如果不存在则添加。\r\n\r\n```xml\r\n<!-- SpringBoot Web -->\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n<!--\r\n<dependency>\r\n	<groupId>org.apache.tomcat.embed</groupId>\r\n	<artifactId>tomcat-embed-core</artifactId>\r\n</dependency>\r\n<dependency>\r\n	<groupId>org.apache.tomcat</groupId>\r\n	<artifactId>tomcat-annotations-api</artifactId>\r\n</dependency>\r\n<dependency>\r\n	<groupId>org.apache.tomcat.embed</groupId>\r\n	<artifactId>tomcat-embed-websocket</artifactId>\r\n</dependency>\r\n-->\r\n```\r\n\r\n5. ruoyi-job模块删除tomcat相关依赖，检查是否存在spring-boot-starter-web，如果不存在则添加。\r\n\r\n```xml\r\n<!-- SpringBoot Web -->\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n<!--\r\n<dependency>\r\n	<groupId>org.apache.tomcat.embed</groupId>\r\n	<artifactId>tomcat-embed-core</artifactId>\r\n</dependency>\r\n<dependency>\r\n	<groupId>org.apache.tomcat</groupId>\r\n	<artifactId>tomcat-annotations-api</artifactId>\r\n</dependency>\r\n<dependency>\r\n	<groupId>org.apache.tomcat.embed</groupId>\r\n	<artifactId>tomcat-embed-websocket</artifactId>\r\n</dependency>\r\n-->\r\n```\r\n\r\n6. ruoyi-system模块删除tomcat相关依赖，检查是否存在spring-boot-starter-web，如果不存在则添加。\r\n\r\n```xml\r\n<!-- SpringBoot Web -->\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n<!--\r\n<dependency>\r\n	<groupId>org.apache.tomcat.embed</groupId>\r\n	<artifactId>tomcat-embed-core</artifactId>\r\n</dependency>\r\n<dependency>\r\n	<groupId>org.apache.tomcat</groupId>\r\n	<artifactId>tomcat-annotations-api</artifactId>\r\n</dependency>\r\n<dependency>\r\n	<groupId>org.apache.tomcat.embed</groupId>\r\n	<artifactId>tomcat-embed-websocket</artifactId>\r\n</dependency>\r\n-->\r\n```\r\n\r\n## 验证\r\n\r\n1. 检查各个服务是否能正常启动\r\n2. 在项目根目录下执行`mvn dependency:tree > upgrade.log` 检查`spring-cloud-starter-gateway`的版本是否为3.1.1。\r\n',0,'',3,1,0,'0','0','2022-03-29 07:39:07',NULL,'2022-03-29'),(11,'测试文章','测试的内容',0,'',3,1,0,'0','0','2022-03-29 07:39:19','2022-03-29 07:39:32','2022-03-29'),(12,'测试文章','测试的内容',0,'',3,1,0,'0','0','2022-03-29 07:39:19','2022-03-29 07:39:32','2022-03-29'),(13,'测试文章','测试的内容',0,'',3,1,0,'0','0','2022-03-29 07:39:07',NULL,'2022-03-29'),(14,'测试文章','测试的内容',0,'',3,1,0,'0','0','2022-03-29 07:39:19','2022-03-29 07:39:32','2022-03-29'),(15,'测试文章','测试的内容',0,'',3,1,0,'0','0','2022-03-29 07:39:19','2022-03-29 07:39:32','2022-03-29');
/*!40000 ALTER TABLE `t_article` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `t_article_tag`
--

DROP TABLE IF EXISTS `t_article_tag`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `t_article_tag` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `tag_id` bigint(20) DEFAULT NULL COMMENT '标签id',
  `article_id` bigint(20) DEFAULT NULL COMMENT '文章id',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=17 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT='文章-标签';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `t_article_tag`
--

LOCK TABLES `t_article_tag` WRITE;
/*!40000 ALTER TABLE `t_article_tag` DISABLE KEYS */;
INSERT INTO `t_article_tag` VALUES (1,1,1),(2,1,1),(3,1,2),(4,2,3),(5,2,4),(6,1,5),(7,1,6),(8,2,7),(9,2,8),(10,1,9),(11,1,10),(12,2,11),(13,2,12),(14,1,13),(15,2,14),(16,1,15);
/*!40000 ALTER TABLE `t_article_tag` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `t_tag`
--

DROP TABLE IF EXISTS `t_tag`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `t_tag` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `name_` varchar(100) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '标签',
  `deleted_` tinyint(1) NOT NULL DEFAULT '0' COMMENT '是否删除。0=未删除，1=已删除',
  `created_by` varchar(20) COLLATE utf8mb4_unicode_ci DEFAULT '0' COMMENT '创建人',
  `update_by` varchar(20) COLLATE utf8mb4_unicode_ci DEFAULT '0' COMMENT '变更人',
  `created_time` datetime DEFAULT NULL COMMENT '创建时间',
  `update_time` datetime DEFAULT NULL COMMENT '变更时间',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT='标签';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `t_tag`
--

LOCK TABLES `t_tag` WRITE;
/*!40000 ALTER TABLE `t_tag` DISABLE KEYS */;
INSERT INTO `t_tag` VALUES (1,'java',0,'0','0',NULL,NULL),(2,'Spring',0,'0','0',NULL,NULL);
/*!40000 ALTER TABLE `t_tag` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `t_topic`
--

DROP TABLE IF EXISTS `t_topic`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `t_topic` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `pid_` bigint(20) NOT NULL DEFAULT '0' COMMENT '父级栏目',
  `title_` varchar(50) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '名称',
  `image_url` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '图片地址',
  `rotation_` tinyint(1) DEFAULT '0' COMMENT '是否为设置为轮播',
  `published_` tinyint(1) DEFAULT '0' COMMENT '栏目是否发布',
  `sorted_` int(3) NOT NULL COMMENT '排序',
  `deleted_` tinyint(1) NOT NULL DEFAULT '0' COMMENT '是否删除。0=未删除，1=已删除',
  `created_by` varchar(20) COLLATE utf8mb4_unicode_ci DEFAULT '0' COMMENT '创建人',
  `update_by` varchar(20) COLLATE utf8mb4_unicode_ci DEFAULT '0' COMMENT '变更人',
  `created_time` datetime DEFAULT NULL COMMENT '创建时间',
  `update_time` datetime DEFAULT NULL COMMENT '变更时间',
  `newer_` tinyint(1) NOT NULL DEFAULT '0' COMMENT '是否显示在最近更新',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT='栏目';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `t_topic`
--

LOCK TABLES `t_topic` WRITE;
/*!40000 ALTER TABLE `t_topic` DISABLE KEYS */;
INSERT INTO `t_topic` VALUES (1,0,'首页',NULL,0,1,1,0,'0','0',NULL,NULL,0),(2,0,'Java',NULL,0,1,2,0,'0','0',NULL,NULL,0),(3,2,'Java基础',NULL,0,1,3,0,'0','0',NULL,NULL,0),(4,2,'JVM',NULL,0,1,4,0,'0','0',NULL,NULL,0),(5,0,'Spring',NULL,0,1,5,0,'0','0',NULL,NULL,0),(6,5,'Spring Framework','/springframework.png',1,1,6,0,'0','0',NULL,NULL,0),(7,5,'Spring Boot','/springboot.png',1,1,7,0,'0','0',NULL,NULL,0),(8,5,'Spring Cloud','sc.png',1,1,8,0,'0','0',NULL,NULL,0);
/*!40000 ALTER TABLE `t_topic` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Dumping routines for database 'tblog'
--
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2022-03-29 19:21:24
